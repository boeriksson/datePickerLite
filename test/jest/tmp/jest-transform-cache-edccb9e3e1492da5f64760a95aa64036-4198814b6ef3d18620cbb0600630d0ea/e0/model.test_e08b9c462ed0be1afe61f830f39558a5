24690616381f6235ffe7b257dd0ac381
'use strict';

var _jsJoda = require('js-joda');

var _model = require('./model');

describe('#firstWeekDay', function () {
    test('should return a monday in same week if given a thursday', function () {
        var givenDay = _jsJoda.LocalDate.parse('2018-05-11');
        expect((0, _model.firstWeekDay)(givenDay).dayOfWeek().toString()).toBe('MONDAY');
    });
});

describe('#parseWeekFromDay1', function () {
    test('should return an array result of a supplied function', function () {
        var startDate = _jsJoda.LocalDate.parse('2018-05-07');
        var expectedResult = ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'];
        var result = (0, _model.parseWeekFromDay1)(startDate)(function (date) {
            return date.dayOfWeek().toString();
        });
        expect(result).toEqual(expectedResult);
    });
});

describe('#populateMonthDisplay', function () {
    var conf = {};
    beforeEach(function () {
        conf.displayDate = _jsJoda.LocalDate.parse('2018-05-01');
        conf.selectedStartDate = undefined;
        conf.selectedEndDate = undefined;
        conf.allowedStartDate = undefined;
        conf.allowedEndDate = undefined;
    });

    test('last entry in first array returned should have property inMonth: true', function () {
        expect((0, _model.populateMonthDisplay)(conf)[0][6].inMonth).toBe(true);
    });

    test();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZGVsLnRlc3QuanMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJ0ZXN0IiwiZ2l2ZW5EYXkiLCJwYXJzZSIsImV4cGVjdCIsImRheU9mV2VlayIsInRvU3RyaW5nIiwidG9CZSIsInN0YXJ0RGF0ZSIsImV4cGVjdGVkUmVzdWx0IiwicmVzdWx0IiwiZGF0ZSIsInRvRXF1YWwiLCJjb25mIiwiYmVmb3JlRWFjaCIsImRpc3BsYXlEYXRlIiwic2VsZWN0ZWRTdGFydERhdGUiLCJ1bmRlZmluZWQiLCJzZWxlY3RlZEVuZERhdGUiLCJhbGxvd2VkU3RhcnREYXRlIiwiYWxsb3dlZEVuZERhdGUiLCJpbk1vbnRoIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBOztBQU9BQSxTQUFTLGVBQVQsRUFBMEIsWUFBTTtBQUM1QkMsU0FBSyx5REFBTCxFQUFnRSxZQUFNO0FBQ2xFLFlBQU1DLFdBQVcsa0JBQVVDLEtBQVYsQ0FBZ0IsWUFBaEIsQ0FBakI7QUFDQUMsZUFBTyx5QkFBYUYsUUFBYixFQUF1QkcsU0FBdkIsR0FBbUNDLFFBQW5DLEVBQVAsRUFBc0RDLElBQXRELENBQTJELFFBQTNEO0FBQ0gsS0FIRDtBQUlILENBTEQ7O0FBT0FQLFNBQVMsb0JBQVQsRUFBK0IsWUFBTTtBQUNqQ0MsU0FBSyxzREFBTCxFQUE2RCxZQUFNO0FBQy9ELFlBQU1PLFlBQVksa0JBQVVMLEtBQVYsQ0FBZ0IsWUFBaEIsQ0FBbEI7QUFDQSxZQUFNTSxpQkFBaUIsQ0FBQyxRQUFELEVBQVUsU0FBVixFQUFvQixXQUFwQixFQUFnQyxVQUFoQyxFQUEyQyxRQUEzQyxFQUFvRCxVQUFwRCxFQUErRCxRQUEvRCxDQUF2QjtBQUNBLFlBQU1DLFNBQVMsOEJBQWtCRixTQUFsQixFQUE2QixVQUFDRyxJQUFEO0FBQUEsbUJBQVVBLEtBQUtOLFNBQUwsR0FBaUJDLFFBQWpCLEVBQVY7QUFBQSxTQUE3QixDQUFmO0FBQ0FGLGVBQU9NLE1BQVAsRUFBZUUsT0FBZixDQUF1QkgsY0FBdkI7QUFDSCxLQUxEO0FBTUgsQ0FQRDs7QUFTQVQsU0FBUyx1QkFBVCxFQUFrQyxZQUFNO0FBQ3BDLFFBQUlhLE9BQU8sRUFBWDtBQUNBQyxlQUFXLFlBQU07QUFDYkQsYUFBS0UsV0FBTCxHQUFtQixrQkFBVVosS0FBVixDQUFnQixZQUFoQixDQUFuQjtBQUNBVSxhQUFLRyxpQkFBTCxHQUF5QkMsU0FBekI7QUFDQUosYUFBS0ssZUFBTCxHQUF1QkQsU0FBdkI7QUFDQUosYUFBS00sZ0JBQUwsR0FBd0JGLFNBQXhCO0FBQ0FKLGFBQUtPLGNBQUwsR0FBc0JILFNBQXRCO0FBQ0gsS0FORDs7QUFRQWhCLFNBQUssdUVBQUwsRUFBOEUsWUFBTTtBQUNoRkcsZUFBTyxpQ0FBcUJTLElBQXJCLEVBQTJCLENBQTNCLEVBQThCLENBQTlCLEVBQWlDUSxPQUF4QyxFQUFpRGQsSUFBakQsQ0FBc0QsSUFBdEQ7QUFDSCxLQUZEOztBQUlBTjtBQUNILENBZkQiLCJmaWxlIjoibW9kZWwudGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExvY2FsRGF0ZSB9IGZyb20gJ2pzLWpvZGEnXHJcblxyXG5pbXBvcnQge1xyXG4gICAgZmlyc3RXZWVrRGF5LFxyXG4gICAgcGFyc2VXZWVrRnJvbURheTEsXHJcbiAgICBwb3B1bGF0ZU1vbnRoRGlzcGxheVxyXG59IGZyb20gJy4vbW9kZWwnXHJcblxyXG5cclxuZGVzY3JpYmUoJyNmaXJzdFdlZWtEYXknLCAoKSA9PiB7XHJcbiAgICB0ZXN0KCdzaG91bGQgcmV0dXJuIGEgbW9uZGF5IGluIHNhbWUgd2VlayBpZiBnaXZlbiBhIHRodXJzZGF5JywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGdpdmVuRGF5ID0gTG9jYWxEYXRlLnBhcnNlKCcyMDE4LTA1LTExJylcclxuICAgICAgICBleHBlY3QoZmlyc3RXZWVrRGF5KGdpdmVuRGF5KS5kYXlPZldlZWsoKS50b1N0cmluZygpKS50b0JlKCdNT05EQVknKVxyXG4gICAgfSlcclxufSlcclxuXHJcbmRlc2NyaWJlKCcjcGFyc2VXZWVrRnJvbURheTEnLCAoKSA9PiB7XHJcbiAgICB0ZXN0KCdzaG91bGQgcmV0dXJuIGFuIGFycmF5IHJlc3VsdCBvZiBhIHN1cHBsaWVkIGZ1bmN0aW9uJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IExvY2FsRGF0ZS5wYXJzZSgnMjAxOC0wNS0wNycpXHJcbiAgICAgICAgY29uc3QgZXhwZWN0ZWRSZXN1bHQgPSBbJ01PTkRBWScsJ1RVRVNEQVknLCdXRURORVNEQVknLCdUSFVSU0RBWScsJ0ZSSURBWScsJ1NBVFVSREFZJywnU1VOREFZJ11cclxuICAgICAgICBjb25zdCByZXN1bHQgPSBwYXJzZVdlZWtGcm9tRGF5MShzdGFydERhdGUpKChkYXRlKSA9PiBkYXRlLmRheU9mV2VlaygpLnRvU3RyaW5nKCkpXHJcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChleHBlY3RlZFJlc3VsdClcclxuICAgIH0pXHJcbn0pXHJcblxyXG5kZXNjcmliZSgnI3BvcHVsYXRlTW9udGhEaXNwbGF5JywgKCkgPT4ge1xyXG4gICAgbGV0IGNvbmYgPSB7fVxyXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICAgICAgY29uZi5kaXNwbGF5RGF0ZSA9IExvY2FsRGF0ZS5wYXJzZSgnMjAxOC0wNS0wMScpXHJcbiAgICAgICAgY29uZi5zZWxlY3RlZFN0YXJ0RGF0ZSA9IHVuZGVmaW5lZFxyXG4gICAgICAgIGNvbmYuc2VsZWN0ZWRFbmREYXRlID0gdW5kZWZpbmVkXHJcbiAgICAgICAgY29uZi5hbGxvd2VkU3RhcnREYXRlID0gdW5kZWZpbmVkXHJcbiAgICAgICAgY29uZi5hbGxvd2VkRW5kRGF0ZSA9IHVuZGVmaW5lZFxyXG4gICAgfSlcclxuXHJcbiAgICB0ZXN0KCdsYXN0IGVudHJ5IGluIGZpcnN0IGFycmF5IHJldHVybmVkIHNob3VsZCBoYXZlIHByb3BlcnR5IGluTW9udGg6IHRydWUnLCAoKSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KHBvcHVsYXRlTW9udGhEaXNwbGF5KGNvbmYpWzBdWzZdLmluTW9udGgpLnRvQmUodHJ1ZSlcclxuICAgIH0pXHJcblxyXG4gICAgdGVzdCgpXHJcbn0pXHJcbiJdfQ==