41695fa18ee9dc0172e8053a91f1be8c
'use strict';

var _jsJoda = require('js-joda');

var _model = require('./model');

describe('#firstWeekDay', function () {
    test('should return a monday in same week if given a thursday', function () {
        var givenDay = _jsJoda.LocalDate.parse('2018-05-11');
        expect((0, _model.firstWeekDay)(givenDay).dayOfWeek().toString()).toBe('MONDAY');
    });
});

describe('#parseWeekFromDay1', function () {
    test('should return an array result of a supplied function', function () {
        var startDate = _jsJoda.LocalDate.parse('2018-05-07');
        var expectedResult = ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'];
        var result = (0, _model.parseWeekFromDay1)(startDate)(function (date) {
            return date.dayOfWeek().toString();
        });
        expect(result).toEqual(expectedResult);
    });
});

describe('#populateMonthDisplay', function () {
    var conf = {};
    beforeEach(function () {
        conf.displayDate = _jsJoda.LocalDate.parse('2018-05-01');
        conf.selectedStartDate = undefined;
        conf.selectedEndDate = undefined;
        conf.allowedStartDate = undefined;
        conf.allowedEndDate = undefined;
    });

    test('last entry in first array returned should have property "inMonth: true"', function () {
        expect((0, _model.populateMonthDisplay)(conf)[0][6].inMonth).toBe(true);
    });

    test('entry in allowedRange should have "allowed: true"', function () {
        conf.allowedStartDate = _jsJoda.LocalDate.parse('2017-05-01');
        conf.allowedEndDate = _jsJoda.LocalDate.parse('2018-05-11');
        expect((0, _model.populateMonthDisplay)(conf)[0][0].allowed).toBe(true);
    });

    test('entry outside of allowedrange should have "allowed: false"', function () {
        conf.allowedStartDate = _jsJoda.LocalDate.parse('2017-05-01');
        conf.allowedEndDate = _jsJoda.LocalDate.parse('2017-05-11');
        expect((0, _model.populateMonthDisplay)(conf)[0][0].allowed).toBe(false);
    });

    describe('selectedRange', function () {
        conf.selectedStartDate = _jsJoda.LocalDate.parse('2018-05-01');
        conf.selectedEndDate = _jsJoda.LocalDate.parse('2018-05-11');

        test('entry in selectedrange should have "selected: true"', function () {
            console.log('log: ', JSON.stringify((0, _model.populateMonthDisplay)(conf)));
            //expect(populateMonthDisplay(conf)[1][0].selected).toBe(true)
        });
        test.skip('entry outside selectedrange should have "selected: false"', function () {
            var endOfSelectedRange = (0, _model.populateMonthDisplay)(conf)[1][4];
            expect(endOfSelectedRange.selected).toBe(true);
            expect(endOfSelectedRange.selectedEdge).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZGVsLnRlc3QuanMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJ0ZXN0IiwiZ2l2ZW5EYXkiLCJwYXJzZSIsImV4cGVjdCIsImRheU9mV2VlayIsInRvU3RyaW5nIiwidG9CZSIsInN0YXJ0RGF0ZSIsImV4cGVjdGVkUmVzdWx0IiwicmVzdWx0IiwiZGF0ZSIsInRvRXF1YWwiLCJjb25mIiwiYmVmb3JlRWFjaCIsImRpc3BsYXlEYXRlIiwic2VsZWN0ZWRTdGFydERhdGUiLCJ1bmRlZmluZWQiLCJzZWxlY3RlZEVuZERhdGUiLCJhbGxvd2VkU3RhcnREYXRlIiwiYWxsb3dlZEVuZERhdGUiLCJpbk1vbnRoIiwiYWxsb3dlZCIsImNvbnNvbGUiLCJsb2ciLCJKU09OIiwic3RyaW5naWZ5Iiwic2tpcCIsImVuZE9mU2VsZWN0ZWRSYW5nZSIsInNlbGVjdGVkIiwic2VsZWN0ZWRFZGdlIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBOztBQU9BQSxTQUFTLGVBQVQsRUFBMEIsWUFBTTtBQUM1QkMsU0FBSyx5REFBTCxFQUFnRSxZQUFNO0FBQ2xFLFlBQU1DLFdBQVcsa0JBQVVDLEtBQVYsQ0FBZ0IsWUFBaEIsQ0FBakI7QUFDQUMsZUFBTyx5QkFBYUYsUUFBYixFQUF1QkcsU0FBdkIsR0FBbUNDLFFBQW5DLEVBQVAsRUFBc0RDLElBQXRELENBQTJELFFBQTNEO0FBQ0gsS0FIRDtBQUlILENBTEQ7O0FBT0FQLFNBQVMsb0JBQVQsRUFBK0IsWUFBTTtBQUNqQ0MsU0FBSyxzREFBTCxFQUE2RCxZQUFNO0FBQy9ELFlBQU1PLFlBQVksa0JBQVVMLEtBQVYsQ0FBZ0IsWUFBaEIsQ0FBbEI7QUFDQSxZQUFNTSxpQkFBaUIsQ0FBQyxRQUFELEVBQVUsU0FBVixFQUFvQixXQUFwQixFQUFnQyxVQUFoQyxFQUEyQyxRQUEzQyxFQUFvRCxVQUFwRCxFQUErRCxRQUEvRCxDQUF2QjtBQUNBLFlBQU1DLFNBQVMsOEJBQWtCRixTQUFsQixFQUE2QixVQUFDRyxJQUFEO0FBQUEsbUJBQVVBLEtBQUtOLFNBQUwsR0FBaUJDLFFBQWpCLEVBQVY7QUFBQSxTQUE3QixDQUFmO0FBQ0FGLGVBQU9NLE1BQVAsRUFBZUUsT0FBZixDQUF1QkgsY0FBdkI7QUFDSCxLQUxEO0FBTUgsQ0FQRDs7QUFTQVQsU0FBUyx1QkFBVCxFQUFrQyxZQUFNO0FBQ3BDLFFBQUlhLE9BQU8sRUFBWDtBQUNBQyxlQUFXLFlBQU07QUFDYkQsYUFBS0UsV0FBTCxHQUFtQixrQkFBVVosS0FBVixDQUFnQixZQUFoQixDQUFuQjtBQUNBVSxhQUFLRyxpQkFBTCxHQUF5QkMsU0FBekI7QUFDQUosYUFBS0ssZUFBTCxHQUF1QkQsU0FBdkI7QUFDQUosYUFBS00sZ0JBQUwsR0FBd0JGLFNBQXhCO0FBQ0FKLGFBQUtPLGNBQUwsR0FBc0JILFNBQXRCO0FBQ0gsS0FORDs7QUFRQWhCLFNBQUsseUVBQUwsRUFBZ0YsWUFBTTtBQUNsRkcsZUFBTyxpQ0FBcUJTLElBQXJCLEVBQTJCLENBQTNCLEVBQThCLENBQTlCLEVBQWlDUSxPQUF4QyxFQUFpRGQsSUFBakQsQ0FBc0QsSUFBdEQ7QUFDSCxLQUZEOztBQUlBTixTQUFLLG1EQUFMLEVBQTBELFlBQU07QUFDNURZLGFBQUtNLGdCQUFMLEdBQXdCLGtCQUFVaEIsS0FBVixDQUFnQixZQUFoQixDQUF4QjtBQUNBVSxhQUFLTyxjQUFMLEdBQXNCLGtCQUFVakIsS0FBVixDQUFnQixZQUFoQixDQUF0QjtBQUNBQyxlQUFPLGlDQUFxQlMsSUFBckIsRUFBMkIsQ0FBM0IsRUFBOEIsQ0FBOUIsRUFBaUNTLE9BQXhDLEVBQWlEZixJQUFqRCxDQUFzRCxJQUF0RDtBQUNILEtBSkQ7O0FBTUFOLFNBQUssNERBQUwsRUFBbUUsWUFBTTtBQUNyRVksYUFBS00sZ0JBQUwsR0FBd0Isa0JBQVVoQixLQUFWLENBQWdCLFlBQWhCLENBQXhCO0FBQ0FVLGFBQUtPLGNBQUwsR0FBc0Isa0JBQVVqQixLQUFWLENBQWdCLFlBQWhCLENBQXRCO0FBQ0FDLGVBQU8saUNBQXFCUyxJQUFyQixFQUEyQixDQUEzQixFQUE4QixDQUE5QixFQUFpQ1MsT0FBeEMsRUFBaURmLElBQWpELENBQXNELEtBQXREO0FBQ0gsS0FKRDs7QUFNQVAsYUFBUyxlQUFULEVBQTBCLFlBQU07QUFDNUJhLGFBQUtHLGlCQUFMLEdBQXlCLGtCQUFVYixLQUFWLENBQWdCLFlBQWhCLENBQXpCO0FBQ0FVLGFBQUtLLGVBQUwsR0FBdUIsa0JBQVVmLEtBQVYsQ0FBZ0IsWUFBaEIsQ0FBdkI7O0FBRUFGLGFBQUsscURBQUwsRUFBNEQsWUFBTTtBQUM5RHNCLG9CQUFRQyxHQUFSLENBQVksT0FBWixFQUFxQkMsS0FBS0MsU0FBTCxDQUFlLGlDQUFxQmIsSUFBckIsQ0FBZixDQUFyQjtBQUNBO0FBQ0gsU0FIRDtBQUlBWixhQUFLMEIsSUFBTCxDQUFVLDJEQUFWLEVBQXVFLFlBQU07QUFDekUsZ0JBQU1DLHFCQUFxQixpQ0FBcUJmLElBQXJCLEVBQTJCLENBQTNCLEVBQThCLENBQTlCLENBQTNCO0FBQ0FULG1CQUFPd0IsbUJBQW1CQyxRQUExQixFQUFvQ3RCLElBQXBDLENBQXlDLElBQXpDO0FBQ0FILG1CQUFPd0IsbUJBQW1CRSxZQUExQixFQUF3Q3ZCLElBQXhDLENBQTZDLElBQTdDO0FBQ0gsU0FKRDtBQUtILEtBYkQ7QUFjSCxDQXhDRCIsImZpbGUiOiJtb2RlbC50ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTG9jYWxEYXRlIH0gZnJvbSAnanMtam9kYSdcclxuXHJcbmltcG9ydCB7XHJcbiAgICBmaXJzdFdlZWtEYXksXHJcbiAgICBwYXJzZVdlZWtGcm9tRGF5MSxcclxuICAgIHBvcHVsYXRlTW9udGhEaXNwbGF5XHJcbn0gZnJvbSAnLi9tb2RlbCdcclxuXHJcblxyXG5kZXNjcmliZSgnI2ZpcnN0V2Vla0RheScsICgpID0+IHtcclxuICAgIHRlc3QoJ3Nob3VsZCByZXR1cm4gYSBtb25kYXkgaW4gc2FtZSB3ZWVrIGlmIGdpdmVuIGEgdGh1cnNkYXknLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZ2l2ZW5EYXkgPSBMb2NhbERhdGUucGFyc2UoJzIwMTgtMDUtMTEnKVxyXG4gICAgICAgIGV4cGVjdChmaXJzdFdlZWtEYXkoZ2l2ZW5EYXkpLmRheU9mV2VlaygpLnRvU3RyaW5nKCkpLnRvQmUoJ01PTkRBWScpXHJcbiAgICB9KVxyXG59KVxyXG5cclxuZGVzY3JpYmUoJyNwYXJzZVdlZWtGcm9tRGF5MScsICgpID0+IHtcclxuICAgIHRlc3QoJ3Nob3VsZCByZXR1cm4gYW4gYXJyYXkgcmVzdWx0IG9mIGEgc3VwcGxpZWQgZnVuY3Rpb24nLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc3RhcnREYXRlID0gTG9jYWxEYXRlLnBhcnNlKCcyMDE4LTA1LTA3JylcclxuICAgICAgICBjb25zdCBleHBlY3RlZFJlc3VsdCA9IFsnTU9OREFZJywnVFVFU0RBWScsJ1dFRE5FU0RBWScsJ1RIVVJTREFZJywnRlJJREFZJywnU0FUVVJEQVknLCdTVU5EQVknXVxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHBhcnNlV2Vla0Zyb21EYXkxKHN0YXJ0RGF0ZSkoKGRhdGUpID0+IGRhdGUuZGF5T2ZXZWVrKCkudG9TdHJpbmcoKSlcclxuICAgICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKGV4cGVjdGVkUmVzdWx0KVxyXG4gICAgfSlcclxufSlcclxuXHJcbmRlc2NyaWJlKCcjcG9wdWxhdGVNb250aERpc3BsYXknLCAoKSA9PiB7XHJcbiAgICBsZXQgY29uZiA9IHt9XHJcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgICAgICBjb25mLmRpc3BsYXlEYXRlID0gTG9jYWxEYXRlLnBhcnNlKCcyMDE4LTA1LTAxJylcclxuICAgICAgICBjb25mLnNlbGVjdGVkU3RhcnREYXRlID0gdW5kZWZpbmVkXHJcbiAgICAgICAgY29uZi5zZWxlY3RlZEVuZERhdGUgPSB1bmRlZmluZWRcclxuICAgICAgICBjb25mLmFsbG93ZWRTdGFydERhdGUgPSB1bmRlZmluZWRcclxuICAgICAgICBjb25mLmFsbG93ZWRFbmREYXRlID0gdW5kZWZpbmVkXHJcbiAgICB9KVxyXG5cclxuICAgIHRlc3QoJ2xhc3QgZW50cnkgaW4gZmlyc3QgYXJyYXkgcmV0dXJuZWQgc2hvdWxkIGhhdmUgcHJvcGVydHkgXCJpbk1vbnRoOiB0cnVlXCInLCAoKSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KHBvcHVsYXRlTW9udGhEaXNwbGF5KGNvbmYpWzBdWzZdLmluTW9udGgpLnRvQmUodHJ1ZSlcclxuICAgIH0pXHJcblxyXG4gICAgdGVzdCgnZW50cnkgaW4gYWxsb3dlZFJhbmdlIHNob3VsZCBoYXZlIFwiYWxsb3dlZDogdHJ1ZVwiJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbmYuYWxsb3dlZFN0YXJ0RGF0ZSA9IExvY2FsRGF0ZS5wYXJzZSgnMjAxNy0wNS0wMScpXHJcbiAgICAgICAgY29uZi5hbGxvd2VkRW5kRGF0ZSA9IExvY2FsRGF0ZS5wYXJzZSgnMjAxOC0wNS0xMScpXHJcbiAgICAgICAgZXhwZWN0KHBvcHVsYXRlTW9udGhEaXNwbGF5KGNvbmYpWzBdWzBdLmFsbG93ZWQpLnRvQmUodHJ1ZSlcclxuICAgIH0pXHJcblxyXG4gICAgdGVzdCgnZW50cnkgb3V0c2lkZSBvZiBhbGxvd2VkcmFuZ2Ugc2hvdWxkIGhhdmUgXCJhbGxvd2VkOiBmYWxzZVwiJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbmYuYWxsb3dlZFN0YXJ0RGF0ZSA9IExvY2FsRGF0ZS5wYXJzZSgnMjAxNy0wNS0wMScpXHJcbiAgICAgICAgY29uZi5hbGxvd2VkRW5kRGF0ZSA9IExvY2FsRGF0ZS5wYXJzZSgnMjAxNy0wNS0xMScpXHJcbiAgICAgICAgZXhwZWN0KHBvcHVsYXRlTW9udGhEaXNwbGF5KGNvbmYpWzBdWzBdLmFsbG93ZWQpLnRvQmUoZmFsc2UpXHJcbiAgICB9KVxyXG5cclxuICAgIGRlc2NyaWJlKCdzZWxlY3RlZFJhbmdlJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbmYuc2VsZWN0ZWRTdGFydERhdGUgPSBMb2NhbERhdGUucGFyc2UoJzIwMTgtMDUtMDEnKVxyXG4gICAgICAgIGNvbmYuc2VsZWN0ZWRFbmREYXRlID0gTG9jYWxEYXRlLnBhcnNlKCcyMDE4LTA1LTExJylcclxuXHJcbiAgICAgICAgdGVzdCgnZW50cnkgaW4gc2VsZWN0ZWRyYW5nZSBzaG91bGQgaGF2ZSBcInNlbGVjdGVkOiB0cnVlXCInLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdsb2c6ICcsIEpTT04uc3RyaW5naWZ5KHBvcHVsYXRlTW9udGhEaXNwbGF5KGNvbmYpKSlcclxuICAgICAgICAgICAgLy9leHBlY3QocG9wdWxhdGVNb250aERpc3BsYXkoY29uZilbMV1bMF0uc2VsZWN0ZWQpLnRvQmUodHJ1ZSlcclxuICAgICAgICB9KVxyXG4gICAgICAgIHRlc3Quc2tpcCgnZW50cnkgb3V0c2lkZSBzZWxlY3RlZHJhbmdlIHNob3VsZCBoYXZlIFwic2VsZWN0ZWQ6IGZhbHNlXCInLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVuZE9mU2VsZWN0ZWRSYW5nZSA9IHBvcHVsYXRlTW9udGhEaXNwbGF5KGNvbmYpWzFdWzRdXHJcbiAgICAgICAgICAgIGV4cGVjdChlbmRPZlNlbGVjdGVkUmFuZ2Uuc2VsZWN0ZWQpLnRvQmUodHJ1ZSlcclxuICAgICAgICAgICAgZXhwZWN0KGVuZE9mU2VsZWN0ZWRSYW5nZS5zZWxlY3RlZEVkZ2UpLnRvQmUodHJ1ZSlcclxuICAgICAgICB9KVxyXG4gICAgfSlcclxufSlcclxuIl19