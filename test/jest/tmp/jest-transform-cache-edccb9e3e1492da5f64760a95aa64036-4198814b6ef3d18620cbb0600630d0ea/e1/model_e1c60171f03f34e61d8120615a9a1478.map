{"version":3,"sources":["model.js"],"names":["parseWeekFromDay1","startDate","dayNo","f","plusDays","firstWeekDay","day","minusDays","dayOfWeek","value","parseWeekFromAnyDay","getWeekHeaders","date","toString","toLowerCase","substr","isWithinRange","endDate","console","log","isAfter","isBefore","populateMonthDisplay","conf","monthNo","displayDate","month","selectedStartDate","selectedEndDate","getDisplayDate","now","dayOfMonth","getModelByDate","config","allowedStartDate","allowedEndDate","weekHeaders","monthDisplay"],"mappings":";;;;;;;AAAA;;;;AAEO,IAAMA,gDAAoB,SAApBA,iBAAoB,CAACC,SAAD;AAAA,QAAYC,KAAZ,uEAAoB,CAApB;AAAA,WAA0B,aAAK;AAC5D,YAAIA,QAAQ,CAAZ,EAAe;AACX,oBAASC,EAAEF,UAAUG,QAAV,CAAmBF,KAAnB,CAAF,CAAT,4BAA2CF,kBAAkBC,SAAlB,EAA6BC,QAAQ,CAArC,EAAwCC,CAAxC,KAA8C,EAAzF;AACH;AACJ,KAJgC;AAAA,CAA1B;;AAMA,IAAME,sCAAe,SAAfA,YAAe,CAACC,GAAD;AAAA,WAASA,IAAIC,SAAJ,CAAcD,IAAIE,SAAJ,GAAgBC,KAAhB,KAA0B,CAAxC,CAAT;AAAA,CAArB;;AAEP,IAAMC,sBAAsB,SAAtBA,mBAAsB;AAAA,WAAOV,kBAAkBK,aAAaC,GAAb,CAAlB,CAAP;AAAA,CAA5B;;AAEA,IAAMK,iBAAiB,SAAjBA,cAAiB;AAAA,WAAOD,oBAAoBJ,GAApB,EAAyB,UAACM,IAAD;AAAA,eAAUA,KAAKJ,SAAL,GAAiBK,QAAjB,GAA4BC,WAA5B,GAA0CC,MAA1C,CAAiD,CAAjD,EAAoD,CAApD,CAAV;AAAA,KAAzB,CAAP;AAAA,CAAvB;;AAEO,IAAMC,wCAAgB,SAAhBA,aAAgB,CAACJ,IAAD,EAAOX,SAAP,EAAkBgB,OAAlB,EAA8B;AACvDC,YAAQC,GAAR,CAAY,sCAAZ,EAAoDP,IAApD,EAA0DX,SAA1D,EAAqEgB,OAArE;AACA,QAAI,CAAChB,SAAD,IAAc,CAACgB,OAAnB,EAA4B,OAAO,KAAP;AAC5B,WAAOL,KAAKQ,OAAL,CAAanB,SAAb,KAA2BW,KAAKS,QAAL,CAAcJ,OAAd,CAAlC;AACH,CAJM;;AAMA,IAAMK,sDAAuB,SAAvBA,oBAAuB,CAACC,IAAD,EAAsD;AAAA,QAA/CC,OAA+C,uEAArCD,KAAKE,WAAL,CAAiBC,KAAjB,GAAyBjB,KAAzB,EAAqC;;AACtF,QAAIJ,aAAakB,KAAKE,WAAlB,EAA+BC,KAA/B,GAAuCjB,KAAvC,MAAkDe,OAAtD,EAA+D;AAC3DN,gBAAQC,GAAR,CAAY,UAAZ,EAAwBH,cAAcJ,IAAd,EAAoBW,KAAKI,iBAAzB,EAA4CJ,KAAKK,eAAjD,CAAxB;AACA;;;;;;;;;;;;;;AAcH,KAhBD,MAgBO;AACH,eAAO,EAAP;AACH;AACJ,CApBM;;AAsBP,IAAMC,iBAAiB,SAAjBA,cAAiB;AAAA,gCAAGJ,WAAH;AAAA,QAAGA,WAAH,oCAAiB,kBAAUK,GAAV,EAAjB;AAAA,WAAuCL,YAAYlB,SAAZ,CAAsBkB,YAAYM,UAAZ,KAA2B,CAAjD,CAAvC;AAAA,CAAvB;;AAEO,IAAMC,0CAAiB,SAAjBA,cAAiB,GAAiB;AAAA,QAAhBC,MAAgB,uEAAP,EAAO;;AAC3C;AACA;AACA;;AAEA;AACA;;AAEA,QAAMV,OAAO;AACTE,qBAAaI,eAAeI,MAAf,CADJ,EAC4B;AACrCN,2BAAmBM,OAAON,iBAFjB,EAEoC;AAC7CC,yBAAiBK,OAAOL,eAHf,EAGgC;AACzCM,0BAAkBD,OAAOC,gBAJhB,EAIkC;AAC3CC,wBAAgBF,OAAOE,cALd,CAK6B;;;AAG1C;AARa,KAAb,CASA,IAAMC,cAAczB,eAAeY,KAAKE,WAApB,CAApB;;AAEA;AACA;AACA,QAAMY,eAAef,qBAAqBC,IAArB,CAArB;AACAL,YAAQC,GAAR,CAAY,gBAAZ,EAA8BkB,YAA9B;;AAEA,WAAO,EAAED,wBAAF,EAAeC,0BAAf,EAAP;AACH,CAzBM","file":"model.js","sourcesContent":["import { LocalDate } from 'js-joda'\r\n\r\nexport const parseWeekFromDay1 = (startDate, dayNo = 0) => f => {\r\n    if (dayNo < 7) {\r\n        return [ f(startDate.plusDays(dayNo)), ...(parseWeekFromDay1(startDate, dayNo + 1)(f) || []) ]\r\n    }\r\n}\r\n\r\nexport const firstWeekDay = (day) => day.minusDays(day.dayOfWeek().value() - 1)\r\n\r\nconst parseWeekFromAnyDay =(day => parseWeekFromDay1(firstWeekDay(day)))\r\n\r\nconst getWeekHeaders = day => parseWeekFromAnyDay(day)((date) => date.dayOfWeek().toString().toLowerCase().substr(0, 2))\r\n\r\nexport const isWithinRange = (date, startDate, endDate) => {\r\n    console.log('date: %o, startDate: %o, endDate: %o', date, startDate, endDate);\r\n    if (!startDate || !endDate) return false\r\n    return date.isAfter(startDate) && date.isBefore(endDate)\r\n}\r\n\r\nexport const populateMonthDisplay = (conf, monthNo = conf.displayDate.month().value()) => {\r\n    if (firstWeekDay(conf.displayDate).month().value() <= monthNo) {\r\n        console.log('return: ', isWithinRange(date, conf.selectedStartDate, conf.selectedEndDate))\r\n        /*\r\n        return [\r\n            parseWeekFromAnyDay(conf.displayDate)((date) => ({\r\n                dayNo: date.dayOfMonth(),\r\n                inMonth: date.month().value() === monthNo,\r\n                //allowed: isWithinRange(date, conf.allowedStartDate, conf.allowedEndDate),\r\n                selected: isWithinRange(date, conf.selectedStartDate, conf.selectedEndDate)\r\n            })),\r\n            ...populateMonthDisplay({\r\n                ...conf,\r\n                displayDate: conf.displayDate.plusDays(7),\r\n            }, monthNo)\r\n        ]\r\n        */\r\n    } else {\r\n        return []\r\n    }\r\n}\r\n\r\nconst getDisplayDate = ({ displayDate = LocalDate.now() }) => displayDate.minusDays(displayDate.dayOfMonth() - 1)\r\n\r\nexport const getModelByDate = (config = {}) => {\r\n    // config: { startDate, selectedStartDate, selectedEndDate, allowedStartDate, allowedEndDate }\r\n    //check if dateStr is str, or localdate and then base model on that\r\n    //else use today\r\n\r\n    //get first day of month and set that as startdate in config\r\n    //const startDate = startDate.minusDays(startDate.dayOfMonth() - 1)\r\n\r\n    const conf = {\r\n        displayDate: getDisplayDate(config), // Date in month to display - change to first day of month..\r\n        selectedStartDate: config.selectedStartDate, // If selection, this is the startdate\r\n        selectedEndDate: config.selectedEndDate, // If selection, enddate\r\n        allowedStartDate: config.allowedStartDate, // If allowedrange, this is startdate\r\n        allowedEndDate: config.allowedEndDate // allowedrange enddate\r\n    }\r\n\r\n    //create array and add dayHeaders\r\n    const weekHeaders = getWeekHeaders(conf.displayDate);\r\n\r\n    //create array and add weeks until last day of month has passed\r\n    //  create array and add weekdays for each week.\r\n    const monthDisplay = populateMonthDisplay(conf)\r\n    console.log('monthDisplay: ', monthDisplay);\r\n\r\n    return { weekHeaders, monthDisplay }\r\n}\r\n"]}