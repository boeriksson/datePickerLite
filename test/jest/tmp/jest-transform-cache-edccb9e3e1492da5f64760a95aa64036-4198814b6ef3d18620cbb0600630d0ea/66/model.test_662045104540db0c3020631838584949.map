{"version":3,"sources":["model.test.js"],"names":["describe","test","givenDay","parse","expect","dayOfWeek","toString","toBe","startDate","expectedResult","result","date","toEqual","conf","beforeEach","displayDate","selectedStartDate","undefined","selectedEndDate","allowedStartDate","allowedEndDate","afterEach","aDate","inMonth","unselectable","selected","endOfSelectedRange","selectedEdge"],"mappings":"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","file":"model.test.js","sourcesContent":["import { LocalDate } from 'js-joda'\r\n\r\nimport {\r\n    firstWeekDay,\r\n    isSelectable,\r\n    parseWeekFromDay1,\r\n    populateMonthDisplay\r\n} from './model'\r\n\r\n\r\ndescribe('#firstWeekDay', () => {\r\n    test('should return a monday in same week if given a thursday', () => {\r\n        const givenDay = LocalDate.parse('2018-05-11')\r\n        expect(firstWeekDay(givenDay).dayOfWeek().toString()).toBe('MONDAY')\r\n    })\r\n})\r\n\r\ndescribe('#parseWeekFromDay1', () => {\r\n    test('should return an array result of a supplied function', () => {\r\n        const startDate = LocalDate.parse('2018-05-07')\r\n        const expectedResult = ['MONDAY','TUESDAY','WEDNESDAY','THURSDAY','FRIDAY','SATURDAY','SUNDAY']\r\n        const result = parseWeekFromDay1(startDate)((date) => date.dayOfWeek().toString())\r\n        expect(result).toEqual(expectedResult)\r\n    })\r\n})\r\n\r\ndescribe('#isSelectable', () => {\r\n    let conf = {}\r\n    beforeEach(() => {\r\n        conf.displayDate = LocalDate.parse('2018-05-01')\r\n        conf.selectedStartDate = undefined\r\n        conf.selectedEndDate = undefined\r\n        conf.allowedStartDate = undefined\r\n        conf.allowedEndDate = undefined\r\n    })\r\n    afterEach(() => {\r\n        conf = {}\r\n    })\r\n\r\n    test('should be selectable if no allowedRange set', () => {\r\n        expect(isSelectable(LocalDate.parse('2018-05-11'), conf)).toBe(true)\r\n    })\r\n\r\n    test('should be isSelectable = true, if only allowedStartDate is set', () => {\r\n        const aDate = LocalDate.parse('2018-05-11')\r\n        conf.allowedStartDate = aDate\r\n        expect(isSelectable(aDate, conf)).toBe(true)\r\n    })\r\n})\r\n\r\ndescribe('#populateMonthDisplay', () => {\r\n    let conf = {}\r\n    beforeEach(() => {\r\n        conf.displayDate = LocalDate.parse('2018-05-01')\r\n        conf.selectedStartDate = undefined\r\n        conf.selectedEndDate = undefined\r\n        conf.allowedStartDate = undefined\r\n        conf.allowedEndDate = undefined\r\n    })\r\n\r\n    afterEach(() => {\r\n        conf = {}\r\n    })\r\n\r\n    test('last entry in first array returned should have property \"inMonth: true\"', () => {\r\n        expect(populateMonthDisplay(conf)[0][6].inMonth).toBe(true)\r\n    })\r\n\r\n    test('entry in allowedRange should have \"unselectable: false\"', () => {\r\n        conf.allowedStartDate = LocalDate.parse('2017-05-01')\r\n        conf.allowedEndDate = LocalDate.parse('2018-05-11')\r\n        expect(populateMonthDisplay(conf)[0][0].unselectable).toBe(false)\r\n    })\r\n\r\n    test('entry outside of allowedrange should have \"unselectable: true\"', () => {\r\n        conf.allowedStartDate = LocalDate.parse('2017-05-01')\r\n        conf.allowedEndDate = LocalDate.parse('2017-05-11')\r\n        expect(populateMonthDisplay(conf)[0][0].unselectable).toBe(true)\r\n    })\r\n\r\n    describe('selectedRange', () => {\r\n        beforeEach(() => {\r\n            conf.selectedStartDate = LocalDate.parse('2018-05-01')\r\n            conf.selectedEndDate = LocalDate.parse('2018-05-11')\r\n        })\r\n        test('entry in selectedrange should have \"selected: true\"', () => {\r\n            expect(populateMonthDisplay(conf)[1][0].selected).toBe(true)\r\n        })\r\n        test('entry outside selectedrange should have \"selected: false\"', () => {\r\n            const endOfSelectedRange = populateMonthDisplay(conf)[1][4]\r\n            expect(endOfSelectedRange.selected).toBe(true)\r\n            expect(endOfSelectedRange.selectedEdge).toBe(true)\r\n        })\r\n    })\r\n})\r\n"]}