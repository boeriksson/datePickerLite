52e3fcc7a9b99e836af2c6f0b9bfb4ca
'use strict';

var _jsJoda = require('js-joda');

var _model = require('./model');

describe('#firstWeekDay', function () {
    test('should return a monday in same week if given a thursday', function () {
        var givenDay = _jsJoda.LocalDate.parse('2018-05-11');
        expect((0, _model.firstWeekDay)(givenDay).dayOfWeek().toString()).toBe('MONDAY');
    });
});

describe('#parseWeekFromDay1', function () {
    test('should return an array result of a supplied function', function () {
        var startDate = _jsJoda.LocalDate.parse('2018-05-07');
        var expectedResult = ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'];
        var result = (0, _model.parseWeekFromDay1)(startDate)(function (date) {
            return date.dayOfWeek().toString();
        });
        expect(result).toEqual(expectedResult);
    });
});

describe('#populateMonthDisplay', function () {
    var conf = {};
    beforeEach(function () {
        conf.displayDate = _jsJoda.LocalDate.parse('2018-05-01');
        conf.selectedStartDate = undefined;
        conf.selectedEndDate = undefined;
        conf.allowedStartDate = undefined;
        conf.allowedEndDate = undefined;
    });

    afterEach(function () {
        conf = {};
    });

    test('last entry in first array returned should have property "inMonth: true"', function () {
        expect((0, _model.populateMonthDisplay)(conf)[0][6].inMonth).toBe(true);
    });

    test('entry in allowedRange should have "allowed: true"', function () {
        conf.allowedStartDate = _jsJoda.LocalDate.parse('2017-05-01');
        conf.allowedEndDate = _jsJoda.LocalDate.parse('2018-05-11');
        expect((0, _model.populateMonthDisplay)(conf)[0][0].allowed).toBe(true);
    });

    test('entry outside of allowedrange should have "allowed: false"', function () {
        conf.allowedStartDate = _jsJoda.LocalDate.parse('2017-05-01');
        conf.allowedEndDate = _jsJoda.LocalDate.parse('2017-05-11');
        expect((0, _model.populateMonthDisplay)(conf)[0][0].allowed).toBe(false);
    });

    describe('selectedRange', function () {
        test('entry in selectedrange should have "selected: true"', function () {
            conf.selectedStartDate = _jsJoda.LocalDate.parse('2018-05-01');
            conf.selectedEndDate = _jsJoda.LocalDate.parse('2018-05-11');
            expect((0, _model.populateMonthDisplay)(conf)[1][0].selected).toBe(true);
        });
        test('entry outside selectedrange should have "selected: false"', function () {
            var endOfSelectedRange = (0, _model.populateMonthDisplay)(conf)[1][4];
            console.log('endOfSelectedRange: ', endOfSelectedRange);
            expect(endOfSelectedRange.selected).toBe(true);
            //expect(endOfSelectedRange.selectedEdge).toBe(true)
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZGVsLnRlc3QuanMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJ0ZXN0IiwiZ2l2ZW5EYXkiLCJwYXJzZSIsImV4cGVjdCIsImRheU9mV2VlayIsInRvU3RyaW5nIiwidG9CZSIsInN0YXJ0RGF0ZSIsImV4cGVjdGVkUmVzdWx0IiwicmVzdWx0IiwiZGF0ZSIsInRvRXF1YWwiLCJjb25mIiwiYmVmb3JlRWFjaCIsImRpc3BsYXlEYXRlIiwic2VsZWN0ZWRTdGFydERhdGUiLCJ1bmRlZmluZWQiLCJzZWxlY3RlZEVuZERhdGUiLCJhbGxvd2VkU3RhcnREYXRlIiwiYWxsb3dlZEVuZERhdGUiLCJhZnRlckVhY2giLCJpbk1vbnRoIiwiYWxsb3dlZCIsInNlbGVjdGVkIiwiZW5kT2ZTZWxlY3RlZFJhbmdlIiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFFQTs7QUFPQUEsU0FBUyxlQUFULEVBQTBCLFlBQU07QUFDNUJDLFNBQUsseURBQUwsRUFBZ0UsWUFBTTtBQUNsRSxZQUFNQyxXQUFXLGtCQUFVQyxLQUFWLENBQWdCLFlBQWhCLENBQWpCO0FBQ0FDLGVBQU8seUJBQWFGLFFBQWIsRUFBdUJHLFNBQXZCLEdBQW1DQyxRQUFuQyxFQUFQLEVBQXNEQyxJQUF0RCxDQUEyRCxRQUEzRDtBQUNILEtBSEQ7QUFJSCxDQUxEOztBQU9BUCxTQUFTLG9CQUFULEVBQStCLFlBQU07QUFDakNDLFNBQUssc0RBQUwsRUFBNkQsWUFBTTtBQUMvRCxZQUFNTyxZQUFZLGtCQUFVTCxLQUFWLENBQWdCLFlBQWhCLENBQWxCO0FBQ0EsWUFBTU0saUJBQWlCLENBQUMsUUFBRCxFQUFVLFNBQVYsRUFBb0IsV0FBcEIsRUFBZ0MsVUFBaEMsRUFBMkMsUUFBM0MsRUFBb0QsVUFBcEQsRUFBK0QsUUFBL0QsQ0FBdkI7QUFDQSxZQUFNQyxTQUFTLDhCQUFrQkYsU0FBbEIsRUFBNkIsVUFBQ0csSUFBRDtBQUFBLG1CQUFVQSxLQUFLTixTQUFMLEdBQWlCQyxRQUFqQixFQUFWO0FBQUEsU0FBN0IsQ0FBZjtBQUNBRixlQUFPTSxNQUFQLEVBQWVFLE9BQWYsQ0FBdUJILGNBQXZCO0FBQ0gsS0FMRDtBQU1ILENBUEQ7O0FBU0FULFNBQVMsdUJBQVQsRUFBa0MsWUFBTTtBQUNwQyxRQUFJYSxPQUFPLEVBQVg7QUFDQUMsZUFBVyxZQUFNO0FBQ2JELGFBQUtFLFdBQUwsR0FBbUIsa0JBQVVaLEtBQVYsQ0FBZ0IsWUFBaEIsQ0FBbkI7QUFDQVUsYUFBS0csaUJBQUwsR0FBeUJDLFNBQXpCO0FBQ0FKLGFBQUtLLGVBQUwsR0FBdUJELFNBQXZCO0FBQ0FKLGFBQUtNLGdCQUFMLEdBQXdCRixTQUF4QjtBQUNBSixhQUFLTyxjQUFMLEdBQXNCSCxTQUF0QjtBQUNILEtBTkQ7O0FBUUFJLGNBQVUsWUFBTTtBQUNaUixlQUFPLEVBQVA7QUFDSCxLQUZEOztBQUlBWixTQUFLLHlFQUFMLEVBQWdGLFlBQU07QUFDbEZHLGVBQU8saUNBQXFCUyxJQUFyQixFQUEyQixDQUEzQixFQUE4QixDQUE5QixFQUFpQ1MsT0FBeEMsRUFBaURmLElBQWpELENBQXNELElBQXREO0FBQ0gsS0FGRDs7QUFJQU4sU0FBSyxtREFBTCxFQUEwRCxZQUFNO0FBQzVEWSxhQUFLTSxnQkFBTCxHQUF3QixrQkFBVWhCLEtBQVYsQ0FBZ0IsWUFBaEIsQ0FBeEI7QUFDQVUsYUFBS08sY0FBTCxHQUFzQixrQkFBVWpCLEtBQVYsQ0FBZ0IsWUFBaEIsQ0FBdEI7QUFDQUMsZUFBTyxpQ0FBcUJTLElBQXJCLEVBQTJCLENBQTNCLEVBQThCLENBQTlCLEVBQWlDVSxPQUF4QyxFQUFpRGhCLElBQWpELENBQXNELElBQXREO0FBQ0gsS0FKRDs7QUFNQU4sU0FBSyw0REFBTCxFQUFtRSxZQUFNO0FBQ3JFWSxhQUFLTSxnQkFBTCxHQUF3QixrQkFBVWhCLEtBQVYsQ0FBZ0IsWUFBaEIsQ0FBeEI7QUFDQVUsYUFBS08sY0FBTCxHQUFzQixrQkFBVWpCLEtBQVYsQ0FBZ0IsWUFBaEIsQ0FBdEI7QUFDQUMsZUFBTyxpQ0FBcUJTLElBQXJCLEVBQTJCLENBQTNCLEVBQThCLENBQTlCLEVBQWlDVSxPQUF4QyxFQUFpRGhCLElBQWpELENBQXNELEtBQXREO0FBQ0gsS0FKRDs7QUFNQVAsYUFBUyxlQUFULEVBQTBCLFlBQU07QUFDNUJDLGFBQUsscURBQUwsRUFBNEQsWUFBTTtBQUM5RFksaUJBQUtHLGlCQUFMLEdBQXlCLGtCQUFVYixLQUFWLENBQWdCLFlBQWhCLENBQXpCO0FBQ0FVLGlCQUFLSyxlQUFMLEdBQXVCLGtCQUFVZixLQUFWLENBQWdCLFlBQWhCLENBQXZCO0FBQ0FDLG1CQUFPLGlDQUFxQlMsSUFBckIsRUFBMkIsQ0FBM0IsRUFBOEIsQ0FBOUIsRUFBaUNXLFFBQXhDLEVBQWtEakIsSUFBbEQsQ0FBdUQsSUFBdkQ7QUFFSCxTQUxEO0FBTUFOLGFBQUssMkRBQUwsRUFBa0UsWUFBTTtBQUNwRSxnQkFBTXdCLHFCQUFxQixpQ0FBcUJaLElBQXJCLEVBQTJCLENBQTNCLEVBQThCLENBQTlCLENBQTNCO0FBQ0FhLG9CQUFRQyxHQUFSLENBQVksc0JBQVosRUFBb0NGLGtCQUFwQztBQUNBckIsbUJBQU9xQixtQkFBbUJELFFBQTFCLEVBQW9DakIsSUFBcEMsQ0FBeUMsSUFBekM7QUFDQTtBQUNILFNBTEQ7QUFNSCxLQWJEO0FBY0gsQ0E1Q0QiLCJmaWxlIjoibW9kZWwudGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExvY2FsRGF0ZSB9IGZyb20gJ2pzLWpvZGEnXHJcblxyXG5pbXBvcnQge1xyXG4gICAgZmlyc3RXZWVrRGF5LFxyXG4gICAgcGFyc2VXZWVrRnJvbURheTEsXHJcbiAgICBwb3B1bGF0ZU1vbnRoRGlzcGxheVxyXG59IGZyb20gJy4vbW9kZWwnXHJcblxyXG5cclxuZGVzY3JpYmUoJyNmaXJzdFdlZWtEYXknLCAoKSA9PiB7XHJcbiAgICB0ZXN0KCdzaG91bGQgcmV0dXJuIGEgbW9uZGF5IGluIHNhbWUgd2VlayBpZiBnaXZlbiBhIHRodXJzZGF5JywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGdpdmVuRGF5ID0gTG9jYWxEYXRlLnBhcnNlKCcyMDE4LTA1LTExJylcclxuICAgICAgICBleHBlY3QoZmlyc3RXZWVrRGF5KGdpdmVuRGF5KS5kYXlPZldlZWsoKS50b1N0cmluZygpKS50b0JlKCdNT05EQVknKVxyXG4gICAgfSlcclxufSlcclxuXHJcbmRlc2NyaWJlKCcjcGFyc2VXZWVrRnJvbURheTEnLCAoKSA9PiB7XHJcbiAgICB0ZXN0KCdzaG91bGQgcmV0dXJuIGFuIGFycmF5IHJlc3VsdCBvZiBhIHN1cHBsaWVkIGZ1bmN0aW9uJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IExvY2FsRGF0ZS5wYXJzZSgnMjAxOC0wNS0wNycpXHJcbiAgICAgICAgY29uc3QgZXhwZWN0ZWRSZXN1bHQgPSBbJ01PTkRBWScsJ1RVRVNEQVknLCdXRURORVNEQVknLCdUSFVSU0RBWScsJ0ZSSURBWScsJ1NBVFVSREFZJywnU1VOREFZJ11cclxuICAgICAgICBjb25zdCByZXN1bHQgPSBwYXJzZVdlZWtGcm9tRGF5MShzdGFydERhdGUpKChkYXRlKSA9PiBkYXRlLmRheU9mV2VlaygpLnRvU3RyaW5nKCkpXHJcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChleHBlY3RlZFJlc3VsdClcclxuICAgIH0pXHJcbn0pXHJcblxyXG5kZXNjcmliZSgnI3BvcHVsYXRlTW9udGhEaXNwbGF5JywgKCkgPT4ge1xyXG4gICAgbGV0IGNvbmYgPSB7fVxyXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICAgICAgY29uZi5kaXNwbGF5RGF0ZSA9IExvY2FsRGF0ZS5wYXJzZSgnMjAxOC0wNS0wMScpXHJcbiAgICAgICAgY29uZi5zZWxlY3RlZFN0YXJ0RGF0ZSA9IHVuZGVmaW5lZFxyXG4gICAgICAgIGNvbmYuc2VsZWN0ZWRFbmREYXRlID0gdW5kZWZpbmVkXHJcbiAgICAgICAgY29uZi5hbGxvd2VkU3RhcnREYXRlID0gdW5kZWZpbmVkXHJcbiAgICAgICAgY29uZi5hbGxvd2VkRW5kRGF0ZSA9IHVuZGVmaW5lZFxyXG4gICAgfSlcclxuXHJcbiAgICBhZnRlckVhY2goKCkgPT4ge1xyXG4gICAgICAgIGNvbmYgPSB7fVxyXG4gICAgfSlcclxuXHJcbiAgICB0ZXN0KCdsYXN0IGVudHJ5IGluIGZpcnN0IGFycmF5IHJldHVybmVkIHNob3VsZCBoYXZlIHByb3BlcnR5IFwiaW5Nb250aDogdHJ1ZVwiJywgKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdChwb3B1bGF0ZU1vbnRoRGlzcGxheShjb25mKVswXVs2XS5pbk1vbnRoKS50b0JlKHRydWUpXHJcbiAgICB9KVxyXG5cclxuICAgIHRlc3QoJ2VudHJ5IGluIGFsbG93ZWRSYW5nZSBzaG91bGQgaGF2ZSBcImFsbG93ZWQ6IHRydWVcIicsICgpID0+IHtcclxuICAgICAgICBjb25mLmFsbG93ZWRTdGFydERhdGUgPSBMb2NhbERhdGUucGFyc2UoJzIwMTctMDUtMDEnKVxyXG4gICAgICAgIGNvbmYuYWxsb3dlZEVuZERhdGUgPSBMb2NhbERhdGUucGFyc2UoJzIwMTgtMDUtMTEnKVxyXG4gICAgICAgIGV4cGVjdChwb3B1bGF0ZU1vbnRoRGlzcGxheShjb25mKVswXVswXS5hbGxvd2VkKS50b0JlKHRydWUpXHJcbiAgICB9KVxyXG5cclxuICAgIHRlc3QoJ2VudHJ5IG91dHNpZGUgb2YgYWxsb3dlZHJhbmdlIHNob3VsZCBoYXZlIFwiYWxsb3dlZDogZmFsc2VcIicsICgpID0+IHtcclxuICAgICAgICBjb25mLmFsbG93ZWRTdGFydERhdGUgPSBMb2NhbERhdGUucGFyc2UoJzIwMTctMDUtMDEnKVxyXG4gICAgICAgIGNvbmYuYWxsb3dlZEVuZERhdGUgPSBMb2NhbERhdGUucGFyc2UoJzIwMTctMDUtMTEnKVxyXG4gICAgICAgIGV4cGVjdChwb3B1bGF0ZU1vbnRoRGlzcGxheShjb25mKVswXVswXS5hbGxvd2VkKS50b0JlKGZhbHNlKVxyXG4gICAgfSlcclxuXHJcbiAgICBkZXNjcmliZSgnc2VsZWN0ZWRSYW5nZScsICgpID0+IHtcclxuICAgICAgICB0ZXN0KCdlbnRyeSBpbiBzZWxlY3RlZHJhbmdlIHNob3VsZCBoYXZlIFwic2VsZWN0ZWQ6IHRydWVcIicsICgpID0+IHtcclxuICAgICAgICAgICAgY29uZi5zZWxlY3RlZFN0YXJ0RGF0ZSA9IExvY2FsRGF0ZS5wYXJzZSgnMjAxOC0wNS0wMScpXHJcbiAgICAgICAgICAgIGNvbmYuc2VsZWN0ZWRFbmREYXRlID0gTG9jYWxEYXRlLnBhcnNlKCcyMDE4LTA1LTExJylcclxuICAgICAgICAgICAgZXhwZWN0KHBvcHVsYXRlTW9udGhEaXNwbGF5KGNvbmYpWzFdWzBdLnNlbGVjdGVkKS50b0JlKHRydWUpXHJcblxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgdGVzdCgnZW50cnkgb3V0c2lkZSBzZWxlY3RlZHJhbmdlIHNob3VsZCBoYXZlIFwic2VsZWN0ZWQ6IGZhbHNlXCInLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVuZE9mU2VsZWN0ZWRSYW5nZSA9IHBvcHVsYXRlTW9udGhEaXNwbGF5KGNvbmYpWzFdWzRdXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlbmRPZlNlbGVjdGVkUmFuZ2U6ICcsIGVuZE9mU2VsZWN0ZWRSYW5nZSk7XHJcbiAgICAgICAgICAgIGV4cGVjdChlbmRPZlNlbGVjdGVkUmFuZ2Uuc2VsZWN0ZWQpLnRvQmUodHJ1ZSlcclxuICAgICAgICAgICAgLy9leHBlY3QoZW5kT2ZTZWxlY3RlZFJhbmdlLnNlbGVjdGVkRWRnZSkudG9CZSh0cnVlKVxyXG4gICAgICAgIH0pXHJcbiAgICB9KVxyXG59KVxyXG4iXX0=