{"version":3,"sources":["model.test.js"],"names":["describe","test","givenDay","parse","expect","dayOfWeek","toString","toBe","startDate","expectedResult","result","date","toEqual","conf","beforeEach","displayDate","selectedStartDate","undefined","selectedEndDate","allowedStartDate","allowedEndDate","inMonth","allowed"],"mappings":";;AAAA;;AAEA;;AAOAA,SAAS,eAAT,EAA0B,YAAM;AAC5BC,SAAK,yDAAL,EAAgE,YAAM;AAClE,YAAMC,WAAW,kBAAUC,KAAV,CAAgB,YAAhB,CAAjB;AACAC,eAAO,yBAAaF,QAAb,EAAuBG,SAAvB,GAAmCC,QAAnC,EAAP,EAAsDC,IAAtD,CAA2D,QAA3D;AACH,KAHD;AAIH,CALD;;AAOAP,SAAS,oBAAT,EAA+B,YAAM;AACjCC,SAAK,sDAAL,EAA6D,YAAM;AAC/D,YAAMO,YAAY,kBAAUL,KAAV,CAAgB,YAAhB,CAAlB;AACA,YAAMM,iBAAiB,CAAC,QAAD,EAAU,SAAV,EAAoB,WAApB,EAAgC,UAAhC,EAA2C,QAA3C,EAAoD,UAApD,EAA+D,QAA/D,CAAvB;AACA,YAAMC,SAAS,8BAAkBF,SAAlB,EAA6B,UAACG,IAAD;AAAA,mBAAUA,KAAKN,SAAL,GAAiBC,QAAjB,EAAV;AAAA,SAA7B,CAAf;AACAF,eAAOM,MAAP,EAAeE,OAAf,CAAuBH,cAAvB;AACH,KALD;AAMH,CAPD;;AASAT,SAAS,uBAAT,EAAkC,YAAM;AACpC,QAAIa,OAAO,EAAX;AACAC,eAAW,YAAM;AACbD,aAAKE,WAAL,GAAmB,kBAAUZ,KAAV,CAAgB,YAAhB,CAAnB;AACAU,aAAKG,iBAAL,GAAyBC,SAAzB;AACAJ,aAAKK,eAAL,GAAuBD,SAAvB;AACAJ,aAAKM,gBAAL,GAAwBF,SAAxB;AACAJ,aAAKO,cAAL,GAAsBH,SAAtB;AACH,KAND;;AAQAhB,SAAK,yEAAL,EAAgF,YAAM;AAClFG,eAAO,iCAAqBS,IAArB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiCQ,OAAxC,EAAiDd,IAAjD,CAAsD,IAAtD;AACH,KAFD;;AAIAN,SAAK,mDAAL,EAA0D,YAAM;AAC5DY,aAAKM,gBAAL,GAAwB,kBAAUhB,KAAV,CAAgB,YAAhB,CAAxB;AACAU,aAAKO,cAAL,GAAsB,kBAAUjB,KAAV,CAAgB,YAAhB,CAAtB;AACAC,eAAO,iCAAqBS,IAArB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiCS,OAAxC,EAAiDf,IAAjD,CAAsD,IAAtD;AACH,KAJD;;AAMAN,SAAK,4DAAL,EAAmE,YAAM;AACrEY,aAAKM,gBAAL,GAAwB,kBAAUhB,KAAV,CAAgB,YAAhB,CAAxB;AACAU,aAAKO,cAAL,GAAsB,kBAAUjB,KAAV,CAAgB,YAAhB,CAAtB;AACAC,eAAO,iCAAqBS,IAArB,EAA2B,CAA3B,EAA8B,CAA9B,EAAiCS,OAAxC,EAAiDf,IAAjD,CAAsD,KAAtD;AACH,KAJD;AAKH,CAzBD","file":"model.test.js","sourcesContent":["import { LocalDate } from 'js-joda'\r\n\r\nimport {\r\n    firstWeekDay,\r\n    parseWeekFromDay1,\r\n    populateMonthDisplay\r\n} from './model'\r\n\r\n\r\ndescribe('#firstWeekDay', () => {\r\n    test('should return a monday in same week if given a thursday', () => {\r\n        const givenDay = LocalDate.parse('2018-05-11')\r\n        expect(firstWeekDay(givenDay).dayOfWeek().toString()).toBe('MONDAY')\r\n    })\r\n})\r\n\r\ndescribe('#parseWeekFromDay1', () => {\r\n    test('should return an array result of a supplied function', () => {\r\n        const startDate = LocalDate.parse('2018-05-07')\r\n        const expectedResult = ['MONDAY','TUESDAY','WEDNESDAY','THURSDAY','FRIDAY','SATURDAY','SUNDAY']\r\n        const result = parseWeekFromDay1(startDate)((date) => date.dayOfWeek().toString())\r\n        expect(result).toEqual(expectedResult)\r\n    })\r\n})\r\n\r\ndescribe('#populateMonthDisplay', () => {\r\n    let conf = {}\r\n    beforeEach(() => {\r\n        conf.displayDate = LocalDate.parse('2018-05-01')\r\n        conf.selectedStartDate = undefined\r\n        conf.selectedEndDate = undefined\r\n        conf.allowedStartDate = undefined\r\n        conf.allowedEndDate = undefined\r\n    })\r\n\r\n    test('last entry in first array returned should have property \"inMonth: true\"', () => {\r\n        expect(populateMonthDisplay(conf)[0][6].inMonth).toBe(true)\r\n    })\r\n\r\n    test('entry in allowedRange should have \"allowed: true\"', () => {\r\n        conf.allowedStartDate = LocalDate.parse('2017-05-01')\r\n        conf.allowedEndDate = LocalDate.parse('2018-05-11')\r\n        expect(populateMonthDisplay(conf)[0][0].allowed).toBe(true)\r\n    })\r\n\r\n    test('entry outside of allowedrange should have \"allowed: false\"', () => {\r\n        conf.allowedStartDate = LocalDate.parse('2017-05-01')\r\n        conf.allowedEndDate = LocalDate.parse('2017-05-11')\r\n        expect(populateMonthDisplay(conf)[0][0].allowed).toBe(false)\r\n    })\r\n})\r\n"]}