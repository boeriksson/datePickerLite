{"version":3,"sources":["model.js"],"names":["parseWeekFromDay1","startDate","dayNo","f","plusDays","firstWeekDay","day","minusDays","dayOfWeek","value","parseWeekFromAnyDay","getWeekHeaders","date","toString","toLowerCase","substr","isWithinRange","endDate","isAfter","isEqual","isBefore","isSelectable","allowedStartDate","allowedEndDate","populateMonthDisplay","conf","monthNo","displayDate","month","dayOfMonth","inMonth","unselectable","selected","selectedStartDate","selectedEndDate","selectedEdge","getDisplayDate","now","getModelByDate","config","weekHeaders","monthDisplay","console","log"],"mappings":";;;;;;;;;AAAA;;;;AAEO,IAAMA,gDAAoB,SAApBA,iBAAoB,CAACC,SAAD;AAAA,QAAYC,KAAZ,uEAAoB,CAApB;AAAA,WAA0B,aAAK;AAC5D,YAAIA,QAAQ,CAAZ,EAAe;AACX,oBAASC,EAAEF,UAAUG,QAAV,CAAmBF,KAAnB,CAAF,CAAT,4BAA2CF,kBAAkBC,SAAlB,EAA6BC,QAAQ,CAArC,EAAwCC,CAAxC,KAA8C,EAAzF;AACH;AACJ,KAJgC;AAAA,CAA1B;;AAMA,IAAME,sCAAe,SAAfA,YAAe,CAACC,GAAD;AAAA,WAASA,IAAIC,SAAJ,CAAcD,IAAIE,SAAJ,GAAgBC,KAAhB,KAA0B,CAAxC,CAAT;AAAA,CAArB;;AAEP,IAAMC,sBAAsB,SAAtBA,mBAAsB;AAAA,WAAOV,kBAAkBK,aAAaC,GAAb,CAAlB,CAAP;AAAA,CAA5B;;AAEA,IAAMK,iBAAiB,SAAjBA,cAAiB;AAAA,WAAOD,oBAAoBJ,GAApB,EAAyB,UAACM,IAAD;AAAA,eAAUA,KAAKJ,SAAL,GAAiBK,QAAjB,GAA4BC,WAA5B,GAA0CC,MAA1C,CAAiD,CAAjD,EAAoD,CAApD,CAAV;AAAA,KAAzB,CAAP;AAAA,CAAvB;;AAEO,IAAMC,wCAAgB,SAAhBA,aAAgB,CAACJ,IAAD,EAAOX,SAAP,EAAkBgB,OAAlB;AAAA,WAA8BhB,aAAagB,OAAb,KACnDL,KAAKM,OAAL,CAAajB,SAAb,KAA2BW,KAAKO,OAAL,CAAalB,SAAb,CADwB,MACKW,KAAKQ,QAAL,CAAcH,OAAd,KAA0BL,KAAKO,OAAL,CAAaF,OAAb,CAD/B,CAA9B;AAAA,CAAtB;;AAGA,IAAMI,sCAAe,SAAfA,YAAe,CAACT,IAAD;AAAA,QAASU,gBAAT,QAASA,gBAAT;AAAA,QAA2BC,cAA3B,QAA2BA,cAA3B;AAAA,WAA+C,CAAC,CAACD,gBAAD,IACpEV,KAAKO,OAAL,CAAaG,gBAAb,KAAkCV,KAAKM,OAAL,CAAaI,gBAAb,CADiC,MAEnE,CAACC,cAAD,IACAX,KAAKO,OAAL,CAAaI,cAAb,KAAgCX,KAAKQ,QAAL,CAAcG,cAAd,CAHmC,CAA/C;AAAA,CAArB;;AAKA,IAAMC,sDAAuB,SAAvBA,oBAAuB,CAACC,IAAD,EAAsD;AAAA,QAA/CC,OAA+C,uEAArCD,KAAKE,WAAL,CAAiBC,KAAjB,GAAyBnB,KAAzB,EAAqC;;AACtF,QAAIJ,aAAaoB,KAAKE,WAAlB,EAA+BC,KAA/B,GAAuCnB,KAAvC,MAAkDiB,OAAtD,EAA+D;AAC3D,gBACIhB,oBAAoBe,KAAKE,WAAzB,EAAsC,UAACf,IAAD;AAAA,mBAAW;AAC7CV,uBAAOU,KAAKiB,UAAL,EADsC;AAE7CC,yBAASlB,KAAKgB,KAAL,GAAanB,KAAb,OAAyBiB,OAFW;AAG7CK,8BAAc,CAACV,aAAaT,IAAb,EAAmBa,IAAnB,CAH8B;AAI7CO,0BAAUhB,cAAcJ,IAAd,EAAoBa,KAAKQ,iBAAzB,EAA4CR,KAAKS,eAAjD,CAJmC;AAK7CC,8BAAcV,KAAKQ,iBAAL,IAA0BR,KAAKS,eAA/B,KACNtB,KAAKO,OAAL,CAAaM,KAAKQ,iBAAlB,KAAwCrB,KAAKO,OAAL,CAAaM,KAAKS,eAAlB,CADlC;AAL+B,aAAX;AAAA,SAAtC,CADJ,4BASOV,kCACIC,IADJ;AAECE,yBAAaF,KAAKE,WAAL,CAAiBvB,QAAjB,CAA0B,CAA1B;AAFd,YAGAsB,OAHA,CATP;AAcH,KAfD,MAeO;AACH,eAAO,EAAP;AACH;AACJ,CAnBM;;AAqBP,IAAMU,iBAAiB,SAAjBA,cAAiB;AAAA,kCAAGT,WAAH;AAAA,QAAGA,WAAH,qCAAiB,kBAAUU,GAAV,EAAjB;AAAA,WAAuCV,YAAYpB,SAAZ,CAAsBoB,YAAYE,UAAZ,KAA2B,CAAjD,CAAvC;AAAA,CAAvB;;AAEO,IAAMS,0CAAiB,SAAjBA,cAAiB,GAAiB;AAAA,QAAhBC,MAAgB,uEAAP,EAAO;;AAC3C;AACA;AACA;;AAEA;AACA;;AAEA,QAAMd,OAAO;AACTE,qBAAaS,eAAeG,MAAf,CADJ,EAC4B;AACrCN,2BAAmBM,OAAON,iBAFjB,EAEoC;AAC7CC,yBAAiBK,OAAOL,eAHf,EAGgC;AACzCZ,0BAAkBiB,OAAOjB,gBAJhB,EAIkC;AAC3CC,wBAAgBgB,OAAOhB,cALd,CAK6B;;;AAG1C;AARa,KAAb,CASA,IAAMiB,cAAc7B,eAAec,KAAKE,WAApB,CAApB;;AAEA;AACA;AACA,QAAMc,eAAejB,qBAAqBC,IAArB,CAArB;AACAiB,YAAQC,GAAR,CAAY,gBAAZ,EAA8BF,YAA9B;;AAEA,WAAO,EAAED,wBAAF,EAAeC,0BAAf,EAAP;AACH,CAzBM","file":"model.js","sourcesContent":["import { LocalDate } from 'js-joda'\r\n\r\nexport const parseWeekFromDay1 = (startDate, dayNo = 0) => f => {\r\n    if (dayNo < 7) {\r\n        return [ f(startDate.plusDays(dayNo)), ...(parseWeekFromDay1(startDate, dayNo + 1)(f) || []) ]\r\n    }\r\n}\r\n\r\nexport const firstWeekDay = (day) => day.minusDays(day.dayOfWeek().value() - 1)\r\n\r\nconst parseWeekFromAnyDay =(day => parseWeekFromDay1(firstWeekDay(day)))\r\n\r\nconst getWeekHeaders = day => parseWeekFromAnyDay(day)((date) => date.dayOfWeek().toString().toLowerCase().substr(0, 2))\r\n\r\nexport const isWithinRange = (date, startDate, endDate) => startDate && endDate\r\n    && (date.isAfter(startDate) || date.isEqual(startDate)) && (date.isBefore(endDate) || date.isEqual(endDate))\r\n\r\nexport const isSelectable = (date, { allowedStartDate, allowedEndDate}) => (!allowedStartDate\r\n    || (date.isEqual(allowedStartDate) || date.isAfter(allowedStartDate)))\r\n    && (!allowedEndDate\r\n    || (date.isEqual(allowedEndDate) || date.isBefore(allowedEndDate)))\r\n\r\nexport const populateMonthDisplay = (conf, monthNo = conf.displayDate.month().value()) => {\r\n    if (firstWeekDay(conf.displayDate).month().value() <= monthNo) {\r\n        return [\r\n            parseWeekFromAnyDay(conf.displayDate)((date) => ({\r\n                dayNo: date.dayOfMonth(),\r\n                inMonth: date.month().value() === monthNo,\r\n                unselectable: !isSelectable(date, conf),\r\n                selected: isWithinRange(date, conf.selectedStartDate, conf.selectedEndDate),\r\n                selectedEdge: conf.selectedStartDate && conf.selectedEndDate\r\n                    && (date.isEqual(conf.selectedStartDate) || date.isEqual(conf.selectedEndDate))\r\n            })),\r\n            ...populateMonthDisplay({\r\n                ...conf,\r\n                displayDate: conf.displayDate.plusDays(7),\r\n            }, monthNo)\r\n        ]\r\n    } else {\r\n        return []\r\n    }\r\n}\r\n\r\nconst getDisplayDate = ({ displayDate = LocalDate.now() }) => displayDate.minusDays(displayDate.dayOfMonth() - 1)\r\n\r\nexport const getModelByDate = (config = {}) => {\r\n    // config: { startDate, selectedStartDate, selectedEndDate, allowedStartDate, allowedEndDate }\r\n    //check if dateStr is str, or localdate and then base model on that\r\n    //else use today\r\n\r\n    //get first day of month and set that as startdate in config\r\n    //const startDate = startDate.minusDays(startDate.dayOfMonth() - 1)\r\n\r\n    const conf = {\r\n        displayDate: getDisplayDate(config), // Date in month to display - change to first day of month..\r\n        selectedStartDate: config.selectedStartDate, // If selection, this is the startdate\r\n        selectedEndDate: config.selectedEndDate, // If selection, enddate\r\n        allowedStartDate: config.allowedStartDate, // If allowedrange, this is startdate\r\n        allowedEndDate: config.allowedEndDate // allowedrange enddate\r\n    }\r\n\r\n    //create array and add dayHeaders\r\n    const weekHeaders = getWeekHeaders(conf.displayDate);\r\n\r\n    //create array and add weeks until last day of month has passed\r\n    //  create array and add weekdays for each week.\r\n    const monthDisplay = populateMonthDisplay(conf)\r\n    console.log('monthDisplay: ', monthDisplay);\r\n\r\n    return { weekHeaders, monthDisplay }\r\n}\r\n"]}