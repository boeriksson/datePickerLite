d0bf14ab4a262d9151d5b4c1fb2714cf
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getModelByDate = exports.populateMonthDisplay = exports.isSelectable = exports.isWithinRange = exports.firstWeekDay = exports.parseWeekFromDay1 = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _jsJoda = require('js-joda');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var parseWeekFromDay1 = exports.parseWeekFromDay1 = function parseWeekFromDay1(startDate) {
    var dayNo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    return function (f) {
        if (dayNo < 7) {
            return [f(startDate.plusDays(dayNo))].concat(_toConsumableArray(parseWeekFromDay1(startDate, dayNo + 1)(f) || []));
        }
    };
};

var firstWeekDay = exports.firstWeekDay = function firstWeekDay(day) {
    return day.minusDays(day.dayOfWeek().value() - 1);
};

var parseWeekFromAnyDay = function parseWeekFromAnyDay(day) {
    return parseWeekFromDay1(firstWeekDay(day));
};

var getWeekHeaders = function getWeekHeaders(day) {
    return parseWeekFromAnyDay(day)(function (date) {
        return date.dayOfWeek().toString().toLowerCase().substr(0, 2);
    });
};

var isWithinRange = exports.isWithinRange = function isWithinRange(date, startDate, endDate) {
    return startDate && endDate && (date.isAfter(startDate) || date.isEqual(startDate)) && (date.isBefore(endDate) || date.isEqual(endDate));
};

var isSelectable = exports.isSelectable = function isSelectable(date, _ref) {
    var allowedStartDate = _ref.allowedStartDate,
        allowedEndDate = _ref.allowedEndDate;
    return (!allowedStartDate || date.isEqual(allowedStartDate) || date.isAfter(allowedStartDate)) && (!allowedEndDate || date.isEqual(allowedEndDate) || date.isBefore(allowedEndDate));
};

var populateMonthDisplay = exports.populateMonthDisplay = function populateMonthDisplay(conf) {
    var monthNo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : conf.displayDate.month().value();

    if (firstWeekDay(conf.displayDate).month().value() <= monthNo) {
        return [parseWeekFromAnyDay(conf.displayDate)(function (date) {
            return {
                dayNo: date.dayOfMonth(),
                inMonth: date.month().value() === monthNo,
                unselectable: !isSelectable(date, conf),
                selected: isWithinRange(date, conf.selectedStartDate, conf.selectedEndDate),
                selectedEdge: conf.selectedStartDate && conf.selectedEndDate && (date.isEqual(conf.selectedStartDate) || date.isEqual(conf.selectedEndDate))
            };
        })].concat(_toConsumableArray(populateMonthDisplay(_extends({}, conf, {
            displayDate: conf.displayDate.plusDays(7)
        }), monthNo)));
    } else {
        return [];
    }
};

var getDisplayDate = function getDisplayDate(_ref2) {
    var displayDate = _ref2.displayDate,
        selectedStartDate = _ref2.selectedStartDate,
        selectedEndDate = _ref2.selectedEndDate;

    if (displayDate) return displayDate;
    var nowDate = _jsJoda.LocalDate.now();
    if (!selectedStartDate) return nowDate;
    return nowDate.until(selectedStartDate, _jsJoda.ChronoUnit.DAYS) < nowDate.until(selectedEndDate, _jsJoda.ChronoUnit.DAYS) ? selectedStartDate : selectedEndDate;
};

var getFirstDayOfMonth = function getFirstDayOfMonth(date) {
    return date.minusDays(date.dayOfMonth() - 1);
};

var getModelByDate = exports.getModelByDate = function getModelByDate() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var conf = {
        displayDate: config.displayDate ? _jsJoda.LocalDate.parse(config.displayDate) : undefined,
        selectedStartDate: config.selectedStartDate ? _jsJoda.LocalDate.parse(config.selectedStartDate) : undefined,
        selectedEndDate: config.selectedEndDate ? _jsJoda.LocalDate.parse(config.selectedEndDate) : undefined,
        allowedStartDate: config.allowedStartDate ? _jsJoda.LocalDate.parse(config.allowedStartDate) : undefined,
        allowedEndDate: config.allowedEndDate ? _jsJoda.LocalDate.parse(config.allowedEndDate) : undefined
    };
    conf.displayDate = getFirstDayOfMonth(getDisplayDate(conf));
    var weekHeaders = getWeekHeaders(conf.displayDate);
    var monthDisplay = populateMonthDisplay(conf);
    console.log('monthDisplay: ', monthDisplay);

    return { weekHeaders: weekHeaders, monthDisplay: monthDisplay };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,