061cf8f6311ca9768e6523483b9215a5
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getModelByDate = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _jsJoda = require('js-joda');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var parseWeekFromDay1 = function parseWeekFromDay1(startDate) {
    var dayNo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    return function (f) {
        if (dayNo < 7) {
            return [f(startDate.plusDays(dayNo))].concat(_toConsumableArray(parseWeekFromDay1(startDate, dayNo + 1)(f) || []));
        }
    };
};

var firstWeekDay = function firstWeekDay(day) {
    return day.minusDays(day.dayOfWeek().value() - 1);
};

var parseWeekFromAnyDay = function parseWeekFromAnyDay(day) {
    return parseWeekFromDay1(firstWeekDay(day));
};

var getWeekHeaders = function getWeekHeaders(day) {
    return parseWeekFromAnyDay(day)(function (date) {
        return date.dayOfWeek().toString().toLowerCase().substr(0, 2);
    });
};

var populateMonthDisplay = function populateMonthDisplay(conf) {
    var monthNo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : conf.displayDate.month().value();

    if (firstWeekDay(conf.displayDate).month().value() <= monthNo) {
        return [parseWeekFromAnyDay(conf.displayDate)(function (date) {
            return {
                dayNo: date.dayOfMonth(),
                inMonth: date.month().value() === monthNo,
                allowed: (conf.allowedStartDate ? date.isAfter(conf.allowedStartDate) : true) && (conf.allowedEndDate ? date.isBefore(conf.allowedEndDate) : true)
            };
        })].concat(_toConsumableArray(populateMonthDisplay(_extends({}, conf, {
            displayDate: conf.displayDate.plusDays(7)
        }), monthNo)));
    } else {
        return [];
    }
};

var getDisplayDate = function getDisplayDate(_ref) {
    var _ref$displayDate = _ref.displayDate,
        displayDate = _ref$displayDate === undefined ? _jsJoda.LocalDate.now() : _ref$displayDate;
    return displayDate.minusDays(displayDate.dayOfMonth() - 1);
};

var getModelByDate = exports.getModelByDate = function getModelByDate() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    // config: { startDate, selectedStartDate, selectedEndDate, allowedStartDate, allowedEndDate }
    //check if dateStr is str, or localdate and then base model on that
    //else use today

    //get first day of month and set that as startdate in config
    //const startDate = startDate.minusDays(startDate.dayOfMonth() - 1)

    var conf = {
        displayDate: getDisplayDate(config), // Date in month to display - change to first day of month..
        selectedStartDate: config.selectedStartDate, // If selection, this is the startdate
        selectedEndDate: config.selectedEndDate, // If selection, enddate
        allowedStartDate: config.allowedStartDate, // If allowedrange, this is startdate
        allowedEndDate: config.allowedEndDate // allowedrange enddate


        //create array and add dayHeaders
    };var weekHeaders = getWeekHeaders(conf.displayDate);

    //create array and add weeks until last day of month has passed
    //  create array and add weekdays for each week.
    var monthDisplay = populateMonthDisplay(conf);
    console.log('monthDisplay: ', monthDisplay);

    return { weekHeaders: weekHeaders, monthDisplay: monthDisplay };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZGVsLmpzIl0sIm5hbWVzIjpbInBhcnNlV2Vla0Zyb21EYXkxIiwic3RhcnREYXRlIiwiZGF5Tm8iLCJmIiwicGx1c0RheXMiLCJmaXJzdFdlZWtEYXkiLCJkYXkiLCJtaW51c0RheXMiLCJkYXlPZldlZWsiLCJ2YWx1ZSIsInBhcnNlV2Vla0Zyb21BbnlEYXkiLCJnZXRXZWVrSGVhZGVycyIsImRhdGUiLCJ0b1N0cmluZyIsInRvTG93ZXJDYXNlIiwic3Vic3RyIiwicG9wdWxhdGVNb250aERpc3BsYXkiLCJjb25mIiwibW9udGhObyIsImRpc3BsYXlEYXRlIiwibW9udGgiLCJkYXlPZk1vbnRoIiwiaW5Nb250aCIsImFsbG93ZWQiLCJhbGxvd2VkU3RhcnREYXRlIiwiaXNBZnRlciIsImFsbG93ZWRFbmREYXRlIiwiaXNCZWZvcmUiLCJnZXREaXNwbGF5RGF0ZSIsIm5vdyIsImdldE1vZGVsQnlEYXRlIiwiY29uZmlnIiwic2VsZWN0ZWRTdGFydERhdGUiLCJzZWxlY3RlZEVuZERhdGUiLCJ3ZWVrSGVhZGVycyIsIm1vbnRoRGlzcGxheSIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOzs7O0FBRUEsSUFBTUEsb0JBQW9CLFNBQXBCQSxpQkFBb0IsQ0FBQ0MsU0FBRDtBQUFBLFFBQVlDLEtBQVosdUVBQW9CLENBQXBCO0FBQUEsV0FBMEIsYUFBSztBQUNyRCxZQUFJQSxRQUFRLENBQVosRUFBZTtBQUNYLG9CQUFTQyxFQUFFRixVQUFVRyxRQUFWLENBQW1CRixLQUFuQixDQUFGLENBQVQsNEJBQTJDRixrQkFBa0JDLFNBQWxCLEVBQTZCQyxRQUFRLENBQXJDLEVBQXdDQyxDQUF4QyxLQUE4QyxFQUF6RjtBQUNIO0FBQ0osS0FKeUI7QUFBQSxDQUExQjs7QUFNQSxJQUFNRSxlQUFlLFNBQWZBLFlBQWUsQ0FBQ0MsR0FBRDtBQUFBLFdBQVNBLElBQUlDLFNBQUosQ0FBY0QsSUFBSUUsU0FBSixHQUFnQkMsS0FBaEIsS0FBMEIsQ0FBeEMsQ0FBVDtBQUFBLENBQXJCOztBQUVBLElBQU1DLHNCQUFzQixTQUF0QkEsbUJBQXNCO0FBQUEsV0FBT1Ysa0JBQWtCSyxhQUFhQyxHQUFiLENBQWxCLENBQVA7QUFBQSxDQUE1Qjs7QUFFQSxJQUFNSyxpQkFBaUIsU0FBakJBLGNBQWlCO0FBQUEsV0FBT0Qsb0JBQW9CSixHQUFwQixFQUF5QixVQUFDTSxJQUFEO0FBQUEsZUFBVUEsS0FBS0osU0FBTCxHQUFpQkssUUFBakIsR0FBNEJDLFdBQTVCLEdBQTBDQyxNQUExQyxDQUFpRCxDQUFqRCxFQUFvRCxDQUFwRCxDQUFWO0FBQUEsS0FBekIsQ0FBUDtBQUFBLENBQXZCOztBQUVBLElBQU1DLHVCQUF1QixTQUF2QkEsb0JBQXVCLENBQUNDLElBQUQsRUFBc0Q7QUFBQSxRQUEvQ0MsT0FBK0MsdUVBQXJDRCxLQUFLRSxXQUFMLENBQWlCQyxLQUFqQixHQUF5QlgsS0FBekIsRUFBcUM7O0FBQy9FLFFBQUlKLGFBQWFZLEtBQUtFLFdBQWxCLEVBQStCQyxLQUEvQixHQUF1Q1gsS0FBdkMsTUFBa0RTLE9BQXRELEVBQStEO0FBQzNELGdCQUNJUixvQkFBb0JPLEtBQUtFLFdBQXpCLEVBQXNDLFVBQUNQLElBQUQ7QUFBQSxtQkFBVztBQUM3Q1YsdUJBQU9VLEtBQUtTLFVBQUwsRUFEc0M7QUFFN0NDLHlCQUFTVixLQUFLUSxLQUFMLEdBQWFYLEtBQWIsT0FBeUJTLE9BRlc7QUFHN0NLLHlCQUFTLENBQUNOLEtBQUtPLGdCQUFMLEdBQXdCWixLQUFLYSxPQUFMLENBQWFSLEtBQUtPLGdCQUFsQixDQUF4QixHQUE4RCxJQUEvRCxNQUNEUCxLQUFLUyxjQUFMLEdBQXNCZCxLQUFLZSxRQUFMLENBQWNWLEtBQUtTLGNBQW5CLENBQXRCLEdBQTJELElBRDFEO0FBSG9DLGFBQVg7QUFBQSxTQUF0QyxDQURKLDRCQU9PVixrQ0FDSUMsSUFESjtBQUVDRSx5QkFBYUYsS0FBS0UsV0FBTCxDQUFpQmYsUUFBakIsQ0FBMEIsQ0FBMUI7QUFGZCxZQUdBYyxPQUhBLENBUFA7QUFZSCxLQWJELE1BYU87QUFDSCxlQUFPLEVBQVA7QUFDSDtBQUNKLENBakJEOztBQW1CQSxJQUFNVSxpQkFBaUIsU0FBakJBLGNBQWlCO0FBQUEsZ0NBQUdULFdBQUg7QUFBQSxRQUFHQSxXQUFILG9DQUFpQixrQkFBVVUsR0FBVixFQUFqQjtBQUFBLFdBQXVDVixZQUFZWixTQUFaLENBQXNCWSxZQUFZRSxVQUFaLEtBQTJCLENBQWpELENBQXZDO0FBQUEsQ0FBdkI7O0FBRU8sSUFBTVMsMENBQWlCLFNBQWpCQSxjQUFpQixHQUFpQjtBQUFBLFFBQWhCQyxNQUFnQix1RUFBUCxFQUFPOztBQUMzQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxRQUFNZCxPQUFPO0FBQ1RFLHFCQUFhUyxlQUFlRyxNQUFmLENBREosRUFDNEI7QUFDckNDLDJCQUFtQkQsT0FBT0MsaUJBRmpCLEVBRW9DO0FBQzdDQyx5QkFBaUJGLE9BQU9FLGVBSGYsRUFHZ0M7QUFDekNULDBCQUFrQk8sT0FBT1AsZ0JBSmhCLEVBSWtDO0FBQzNDRSx3QkFBZ0JLLE9BQU9MLGNBTGQsQ0FLNkI7OztBQUcxQztBQVJhLEtBQWIsQ0FTQSxJQUFNUSxjQUFjdkIsZUFBZU0sS0FBS0UsV0FBcEIsQ0FBcEI7O0FBRUE7QUFDQTtBQUNBLFFBQU1nQixlQUFlbkIscUJBQXFCQyxJQUFyQixDQUFyQjtBQUNBbUIsWUFBUUMsR0FBUixDQUFZLGdCQUFaLEVBQThCRixZQUE5Qjs7QUFFQSxXQUFPLEVBQUVELHdCQUFGLEVBQWVDLDBCQUFmLEVBQVA7QUFDSCxDQXpCTSIsImZpbGUiOiJtb2RlbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExvY2FsRGF0ZSB9IGZyb20gJ2pzLWpvZGEnXHJcblxyXG5jb25zdCBwYXJzZVdlZWtGcm9tRGF5MSA9IChzdGFydERhdGUsIGRheU5vID0gMCkgPT4gZiA9PiB7XHJcbiAgICBpZiAoZGF5Tm8gPCA3KSB7XHJcbiAgICAgICAgcmV0dXJuIFsgZihzdGFydERhdGUucGx1c0RheXMoZGF5Tm8pKSwgLi4uKHBhcnNlV2Vla0Zyb21EYXkxKHN0YXJ0RGF0ZSwgZGF5Tm8gKyAxKShmKSB8fCBbXSkgXVxyXG4gICAgfVxyXG59XHJcblxyXG5jb25zdCBmaXJzdFdlZWtEYXkgPSAoZGF5KSA9PiBkYXkubWludXNEYXlzKGRheS5kYXlPZldlZWsoKS52YWx1ZSgpIC0gMSlcclxuXHJcbmNvbnN0IHBhcnNlV2Vla0Zyb21BbnlEYXkgPShkYXkgPT4gcGFyc2VXZWVrRnJvbURheTEoZmlyc3RXZWVrRGF5KGRheSkpKVxyXG5cclxuY29uc3QgZ2V0V2Vla0hlYWRlcnMgPSBkYXkgPT4gcGFyc2VXZWVrRnJvbUFueURheShkYXkpKChkYXRlKSA9PiBkYXRlLmRheU9mV2VlaygpLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKS5zdWJzdHIoMCwgMikpXHJcblxyXG5jb25zdCBwb3B1bGF0ZU1vbnRoRGlzcGxheSA9IChjb25mLCBtb250aE5vID0gY29uZi5kaXNwbGF5RGF0ZS5tb250aCgpLnZhbHVlKCkpID0+IHtcclxuICAgIGlmIChmaXJzdFdlZWtEYXkoY29uZi5kaXNwbGF5RGF0ZSkubW9udGgoKS52YWx1ZSgpIDw9IG1vbnRoTm8pIHtcclxuICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICBwYXJzZVdlZWtGcm9tQW55RGF5KGNvbmYuZGlzcGxheURhdGUpKChkYXRlKSA9PiAoe1xyXG4gICAgICAgICAgICAgICAgZGF5Tm86IGRhdGUuZGF5T2ZNb250aCgpLFxyXG4gICAgICAgICAgICAgICAgaW5Nb250aDogZGF0ZS5tb250aCgpLnZhbHVlKCkgPT09IG1vbnRoTm8sXHJcbiAgICAgICAgICAgICAgICBhbGxvd2VkOiAoY29uZi5hbGxvd2VkU3RhcnREYXRlID8gZGF0ZS5pc0FmdGVyKGNvbmYuYWxsb3dlZFN0YXJ0RGF0ZSkgOiB0cnVlKVxyXG4gICAgICAgICAgICAgICAgICAgICYmIChjb25mLmFsbG93ZWRFbmREYXRlID8gZGF0ZS5pc0JlZm9yZShjb25mLmFsbG93ZWRFbmREYXRlKSA6IHRydWUpXHJcbiAgICAgICAgICAgIH0pKSxcclxuICAgICAgICAgICAgLi4ucG9wdWxhdGVNb250aERpc3BsYXkoe1xyXG4gICAgICAgICAgICAgICAgLi4uY29uZixcclxuICAgICAgICAgICAgICAgIGRpc3BsYXlEYXRlOiBjb25mLmRpc3BsYXlEYXRlLnBsdXNEYXlzKDcpLFxyXG4gICAgICAgICAgICB9LCBtb250aE5vKVxyXG4gICAgICAgIF1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIFtdXHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IGdldERpc3BsYXlEYXRlID0gKHsgZGlzcGxheURhdGUgPSBMb2NhbERhdGUubm93KCkgfSkgPT4gZGlzcGxheURhdGUubWludXNEYXlzKGRpc3BsYXlEYXRlLmRheU9mTW9udGgoKSAtIDEpXHJcblxyXG5leHBvcnQgY29uc3QgZ2V0TW9kZWxCeURhdGUgPSAoY29uZmlnID0ge30pID0+IHtcclxuICAgIC8vIGNvbmZpZzogeyBzdGFydERhdGUsIHNlbGVjdGVkU3RhcnREYXRlLCBzZWxlY3RlZEVuZERhdGUsIGFsbG93ZWRTdGFydERhdGUsIGFsbG93ZWRFbmREYXRlIH1cclxuICAgIC8vY2hlY2sgaWYgZGF0ZVN0ciBpcyBzdHIsIG9yIGxvY2FsZGF0ZSBhbmQgdGhlbiBiYXNlIG1vZGVsIG9uIHRoYXRcclxuICAgIC8vZWxzZSB1c2UgdG9kYXlcclxuXHJcbiAgICAvL2dldCBmaXJzdCBkYXkgb2YgbW9udGggYW5kIHNldCB0aGF0IGFzIHN0YXJ0ZGF0ZSBpbiBjb25maWdcclxuICAgIC8vY29uc3Qgc3RhcnREYXRlID0gc3RhcnREYXRlLm1pbnVzRGF5cyhzdGFydERhdGUuZGF5T2ZNb250aCgpIC0gMSlcclxuXHJcbiAgICBjb25zdCBjb25mID0ge1xyXG4gICAgICAgIGRpc3BsYXlEYXRlOiBnZXREaXNwbGF5RGF0ZShjb25maWcpLCAvLyBEYXRlIGluIG1vbnRoIHRvIGRpc3BsYXkgLSBjaGFuZ2UgdG8gZmlyc3QgZGF5IG9mIG1vbnRoLi5cclxuICAgICAgICBzZWxlY3RlZFN0YXJ0RGF0ZTogY29uZmlnLnNlbGVjdGVkU3RhcnREYXRlLCAvLyBJZiBzZWxlY3Rpb24sIHRoaXMgaXMgdGhlIHN0YXJ0ZGF0ZVxyXG4gICAgICAgIHNlbGVjdGVkRW5kRGF0ZTogY29uZmlnLnNlbGVjdGVkRW5kRGF0ZSwgLy8gSWYgc2VsZWN0aW9uLCBlbmRkYXRlXHJcbiAgICAgICAgYWxsb3dlZFN0YXJ0RGF0ZTogY29uZmlnLmFsbG93ZWRTdGFydERhdGUsIC8vIElmIGFsbG93ZWRyYW5nZSwgdGhpcyBpcyBzdGFydGRhdGVcclxuICAgICAgICBhbGxvd2VkRW5kRGF0ZTogY29uZmlnLmFsbG93ZWRFbmREYXRlIC8vIGFsbG93ZWRyYW5nZSBlbmRkYXRlXHJcbiAgICB9XHJcblxyXG4gICAgLy9jcmVhdGUgYXJyYXkgYW5kIGFkZCBkYXlIZWFkZXJzXHJcbiAgICBjb25zdCB3ZWVrSGVhZGVycyA9IGdldFdlZWtIZWFkZXJzKGNvbmYuZGlzcGxheURhdGUpO1xyXG5cclxuICAgIC8vY3JlYXRlIGFycmF5IGFuZCBhZGQgd2Vla3MgdW50aWwgbGFzdCBkYXkgb2YgbW9udGggaGFzIHBhc3NlZFxyXG4gICAgLy8gIGNyZWF0ZSBhcnJheSBhbmQgYWRkIHdlZWtkYXlzIGZvciBlYWNoIHdlZWsuXHJcbiAgICBjb25zdCBtb250aERpc3BsYXkgPSBwb3B1bGF0ZU1vbnRoRGlzcGxheShjb25mKVxyXG4gICAgY29uc29sZS5sb2coJ21vbnRoRGlzcGxheTogJywgbW9udGhEaXNwbGF5KTtcclxuXHJcbiAgICByZXR1cm4geyB3ZWVrSGVhZGVycywgbW9udGhEaXNwbGF5IH1cclxufVxyXG4iXX0=