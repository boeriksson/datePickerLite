{"version":3,"sources":["model.js"],"names":["parseWeekFromDay1","startDate","dayNo","f","plusDays","firstWeekDay","day","minusDays","dayOfWeek","value","parseWeekFromAnyDay","getWeekHeaders","date","toString","toLowerCase","substr","populateMonthDisplay","conf","monthNo","displayDate","month","dayOfMonth","inMonth","allowed","allowedStartDate","isAfter","allowedEndDate","isBefore","getDisplayDate","now","getModelByDate","config","selectedStartDate","selectedEndDate","weekHeaders","monthDisplay","console","log"],"mappings":";;;;;;;;;AAAA;;;;AAEA,IAAMA,oBAAoB,SAApBA,iBAAoB,CAACC,SAAD;AAAA,QAAYC,KAAZ,uEAAoB,CAApB;AAAA,WAA0B,aAAK;AACrD,YAAIA,QAAQ,CAAZ,EAAe;AACX,oBAASC,EAAEF,UAAUG,QAAV,CAAmBF,KAAnB,CAAF,CAAT,4BAA2CF,kBAAkBC,SAAlB,EAA6BC,QAAQ,CAArC,EAAwCC,CAAxC,KAA8C,EAAzF;AACH;AACJ,KAJyB;AAAA,CAA1B;;AAMA,IAAME,eAAe,SAAfA,YAAe,CAACC,GAAD;AAAA,WAASA,IAAIC,SAAJ,CAAcD,IAAIE,SAAJ,GAAgBC,KAAhB,KAA0B,CAAxC,CAAT;AAAA,CAArB;;AAEA,IAAMC,sBAAsB,SAAtBA,mBAAsB;AAAA,WAAOV,kBAAkBK,aAAaC,GAAb,CAAlB,CAAP;AAAA,CAA5B;;AAEA,IAAMK,iBAAiB,SAAjBA,cAAiB;AAAA,WAAOD,oBAAoBJ,GAApB,EAAyB,UAACM,IAAD;AAAA,eAAUA,KAAKJ,SAAL,GAAiBK,QAAjB,GAA4BC,WAA5B,GAA0CC,MAA1C,CAAiD,CAAjD,EAAoD,CAApD,CAAV;AAAA,KAAzB,CAAP;AAAA,CAAvB;;AAEA,IAAMC,uBAAuB,SAAvBA,oBAAuB,CAACC,IAAD,EAAsD;AAAA,QAA/CC,OAA+C,uEAArCD,KAAKE,WAAL,CAAiBC,KAAjB,GAAyBX,KAAzB,EAAqC;;AAC/E,QAAIJ,aAAaY,KAAKE,WAAlB,EAA+BC,KAA/B,GAAuCX,KAAvC,MAAkDS,OAAtD,EAA+D;AAC3D,gBACIR,oBAAoBO,KAAKE,WAAzB,EAAsC,UAACP,IAAD;AAAA,mBAAW;AAC7CV,uBAAOU,KAAKS,UAAL,EADsC;AAE7CC,yBAASV,KAAKQ,KAAL,GAAaX,KAAb,OAAyBS,OAFW;AAG7CK,yBAAS,CAACN,KAAKO,gBAAL,GAAwBZ,KAAKa,OAAL,CAAaR,KAAKO,gBAAlB,CAAxB,GAA8D,IAA/D,MACDP,KAAKS,cAAL,GAAsBd,KAAKe,QAAL,CAAcV,KAAKS,cAAnB,CAAtB,GAA2D,IAD1D;AAHoC,aAAX;AAAA,SAAtC,CADJ,4BAOOV,kCACIC,IADJ;AAECE,yBAAaF,KAAKE,WAAL,CAAiBf,QAAjB,CAA0B,CAA1B;AAFd,YAGAc,OAHA,CAPP;AAYH,KAbD,MAaO;AACH,eAAO,EAAP;AACH;AACJ,CAjBD;;AAmBA,IAAMU,iBAAiB,SAAjBA,cAAiB;AAAA,gCAAGT,WAAH;AAAA,QAAGA,WAAH,oCAAiB,kBAAUU,GAAV,EAAjB;AAAA,WAAuCV,YAAYZ,SAAZ,CAAsBY,YAAYE,UAAZ,KAA2B,CAAjD,CAAvC;AAAA,CAAvB;;AAEO,IAAMS,0CAAiB,SAAjBA,cAAiB,GAAiB;AAAA,QAAhBC,MAAgB,uEAAP,EAAO;;AAC3C;AACA;AACA;;AAEA;AACA;;AAEA,QAAMd,OAAO;AACTE,qBAAaS,eAAeG,MAAf,CADJ,EAC4B;AACrCC,2BAAmBD,OAAOC,iBAFjB,EAEoC;AAC7CC,yBAAiBF,OAAOE,eAHf,EAGgC;AACzCT,0BAAkBO,OAAOP,gBAJhB,EAIkC;AAC3CE,wBAAgBK,OAAOL,cALd,CAK6B;;;AAG1C;AARa,KAAb,CASA,IAAMQ,cAAcvB,eAAeM,KAAKE,WAApB,CAApB;;AAEA;AACA;AACA,QAAMgB,eAAenB,qBAAqBC,IAArB,CAArB;AACAmB,YAAQC,GAAR,CAAY,gBAAZ,EAA8BF,YAA9B;;AAEA,WAAO,EAAED,wBAAF,EAAeC,0BAAf,EAAP;AACH,CAzBM","file":"model.js","sourcesContent":["import { LocalDate } from 'js-joda'\r\n\r\nconst parseWeekFromDay1 = (startDate, dayNo = 0) => f => {\r\n    if (dayNo < 7) {\r\n        return [ f(startDate.plusDays(dayNo)), ...(parseWeekFromDay1(startDate, dayNo + 1)(f) || []) ]\r\n    }\r\n}\r\n\r\nconst firstWeekDay = (day) => day.minusDays(day.dayOfWeek().value() - 1)\r\n\r\nconst parseWeekFromAnyDay =(day => parseWeekFromDay1(firstWeekDay(day)))\r\n\r\nconst getWeekHeaders = day => parseWeekFromAnyDay(day)((date) => date.dayOfWeek().toString().toLowerCase().substr(0, 2))\r\n\r\nconst populateMonthDisplay = (conf, monthNo = conf.displayDate.month().value()) => {\r\n    if (firstWeekDay(conf.displayDate).month().value() <= monthNo) {\r\n        return [\r\n            parseWeekFromAnyDay(conf.displayDate)((date) => ({\r\n                dayNo: date.dayOfMonth(),\r\n                inMonth: date.month().value() === monthNo,\r\n                allowed: (conf.allowedStartDate ? date.isAfter(conf.allowedStartDate) : true)\r\n                    && (conf.allowedEndDate ? date.isBefore(conf.allowedEndDate) : true)\r\n            })),\r\n            ...populateMonthDisplay({\r\n                ...conf,\r\n                displayDate: conf.displayDate.plusDays(7),\r\n            }, monthNo)\r\n        ]\r\n    } else {\r\n        return []\r\n    }\r\n}\r\n\r\nconst getDisplayDate = ({ displayDate = LocalDate.now() }) => displayDate.minusDays(displayDate.dayOfMonth() - 1)\r\n\r\nexport const getModelByDate = (config = {}) => {\r\n    // config: { startDate, selectedStartDate, selectedEndDate, allowedStartDate, allowedEndDate }\r\n    //check if dateStr is str, or localdate and then base model on that\r\n    //else use today\r\n\r\n    //get first day of month and set that as startdate in config\r\n    //const startDate = startDate.minusDays(startDate.dayOfMonth() - 1)\r\n\r\n    const conf = {\r\n        displayDate: getDisplayDate(config), // Date in month to display - change to first day of month..\r\n        selectedStartDate: config.selectedStartDate, // If selection, this is the startdate\r\n        selectedEndDate: config.selectedEndDate, // If selection, enddate\r\n        allowedStartDate: config.allowedStartDate, // If allowedrange, this is startdate\r\n        allowedEndDate: config.allowedEndDate // allowedrange enddate\r\n    }\r\n\r\n    //create array and add dayHeaders\r\n    const weekHeaders = getWeekHeaders(conf.displayDate);\r\n\r\n    //create array and add weeks until last day of month has passed\r\n    //  create array and add weekdays for each week.\r\n    const monthDisplay = populateMonthDisplay(conf)\r\n    console.log('monthDisplay: ', monthDisplay);\r\n\r\n    return { weekHeaders, monthDisplay }\r\n}\r\n"]}