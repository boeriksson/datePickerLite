f97dbd77b95c0bee42cbd7f17e3ca346
'use strict';

var _jsJoda = require('js-joda');

var _model = require('./model');

describe('#firstWeekDay', function () {
    test('should return a monday in same week if given a thursday', function () {
        var givenDay = _jsJoda.LocalDate.parse('2018-05-11');
        expect((0, _model.firstWeekDay)(givenDay).dayOfWeek().toString()).toBe('MONDAY');
    });
});

describe('#parseWeekFromDay1', function () {
    test('should return an array result of a supplied function', function () {
        var startDate = _jsJoda.LocalDate.parse('2018-05-07');
        var expectedResult = ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'];
        var result = (0, _model.parseWeekFromDay1)(startDate)(function (date) {
            return date.dayOfWeek().toString();
        });
        expect(result).toEqual(expectedResult);
    });
});

describe('#populateMonthDisplay', function () {
    var conf = {};
    beforeEach(function () {
        conf.displayDate = _jsJoda.LocalDate.parse('2018-05-01');
        conf.selectedStartDate = undefined;
        conf.selectedEndDate = undefined;
        conf.allowedStartDate = undefined;
        conf.allowedEndDate = undefined;
    });

    afterEach(function () {
        conf = {};
    });

    test('last entry in first array returned should have property "inMonth: true"', function () {
        expect((0, _model.populateMonthDisplay)(conf)[0][6].inMonth).toBe(true);
    });

    test('entry in allowedRange should have "allowed: true"', function () {
        conf.allowedStartDate = _jsJoda.LocalDate.parse('2017-05-01');
        conf.allowedEndDate = _jsJoda.LocalDate.parse('2018-05-11');
        expect((0, _model.populateMonthDisplay)(conf)[0][0].allowed).toBe(true);
    });

    test('entry outside of allowedrange should have "allowed: false"', function () {
        conf.allowedStartDate = _jsJoda.LocalDate.parse('2017-05-01');
        conf.allowedEndDate = _jsJoda.LocalDate.parse('2017-05-11');
        expect((0, _model.populateMonthDisplay)(conf)[0][0].allowed).toBe(false);
    });

    describe('selectedRange', function () {

        test('entry in selectedrange should have "selected: true"', function () {
            conf.selectedStartDate = _jsJoda.LocalDate.parse('2018-05-01');
            conf.selectedEndDate = _jsJoda.LocalDate.parse('2018-05-11');
            expect((0, _model.populateMonthDisplay)(conf)[1][0].selected).toBe(true);
        });
        test.skip('entry outside selectedrange should have "selected: false"', function () {
            var endOfSelectedRange = (0, _model.populateMonthDisplay)(conf)[1][4];
            expect(endOfSelectedRange.selected).toBe(true);
            expect(endOfSelectedRange.selectedEdge).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZGVsLnRlc3QuanMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJ0ZXN0IiwiZ2l2ZW5EYXkiLCJwYXJzZSIsImV4cGVjdCIsImRheU9mV2VlayIsInRvU3RyaW5nIiwidG9CZSIsInN0YXJ0RGF0ZSIsImV4cGVjdGVkUmVzdWx0IiwicmVzdWx0IiwiZGF0ZSIsInRvRXF1YWwiLCJjb25mIiwiYmVmb3JlRWFjaCIsImRpc3BsYXlEYXRlIiwic2VsZWN0ZWRTdGFydERhdGUiLCJ1bmRlZmluZWQiLCJzZWxlY3RlZEVuZERhdGUiLCJhbGxvd2VkU3RhcnREYXRlIiwiYWxsb3dlZEVuZERhdGUiLCJhZnRlckVhY2giLCJpbk1vbnRoIiwiYWxsb3dlZCIsInNlbGVjdGVkIiwic2tpcCIsImVuZE9mU2VsZWN0ZWRSYW5nZSIsInNlbGVjdGVkRWRnZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFFQTs7QUFPQUEsU0FBUyxlQUFULEVBQTBCLFlBQU07QUFDNUJDLFNBQUsseURBQUwsRUFBZ0UsWUFBTTtBQUNsRSxZQUFNQyxXQUFXLGtCQUFVQyxLQUFWLENBQWdCLFlBQWhCLENBQWpCO0FBQ0FDLGVBQU8seUJBQWFGLFFBQWIsRUFBdUJHLFNBQXZCLEdBQW1DQyxRQUFuQyxFQUFQLEVBQXNEQyxJQUF0RCxDQUEyRCxRQUEzRDtBQUNILEtBSEQ7QUFJSCxDQUxEOztBQU9BUCxTQUFTLG9CQUFULEVBQStCLFlBQU07QUFDakNDLFNBQUssc0RBQUwsRUFBNkQsWUFBTTtBQUMvRCxZQUFNTyxZQUFZLGtCQUFVTCxLQUFWLENBQWdCLFlBQWhCLENBQWxCO0FBQ0EsWUFBTU0saUJBQWlCLENBQUMsUUFBRCxFQUFVLFNBQVYsRUFBb0IsV0FBcEIsRUFBZ0MsVUFBaEMsRUFBMkMsUUFBM0MsRUFBb0QsVUFBcEQsRUFBK0QsUUFBL0QsQ0FBdkI7QUFDQSxZQUFNQyxTQUFTLDhCQUFrQkYsU0FBbEIsRUFBNkIsVUFBQ0csSUFBRDtBQUFBLG1CQUFVQSxLQUFLTixTQUFMLEdBQWlCQyxRQUFqQixFQUFWO0FBQUEsU0FBN0IsQ0FBZjtBQUNBRixlQUFPTSxNQUFQLEVBQWVFLE9BQWYsQ0FBdUJILGNBQXZCO0FBQ0gsS0FMRDtBQU1ILENBUEQ7O0FBU0FULFNBQVMsdUJBQVQsRUFBa0MsWUFBTTtBQUNwQyxRQUFJYSxPQUFPLEVBQVg7QUFDQUMsZUFBVyxZQUFNO0FBQ2JELGFBQUtFLFdBQUwsR0FBbUIsa0JBQVVaLEtBQVYsQ0FBZ0IsWUFBaEIsQ0FBbkI7QUFDQVUsYUFBS0csaUJBQUwsR0FBeUJDLFNBQXpCO0FBQ0FKLGFBQUtLLGVBQUwsR0FBdUJELFNBQXZCO0FBQ0FKLGFBQUtNLGdCQUFMLEdBQXdCRixTQUF4QjtBQUNBSixhQUFLTyxjQUFMLEdBQXNCSCxTQUF0QjtBQUNILEtBTkQ7O0FBUUFJLGNBQVUsWUFBTTtBQUNaUixlQUFPLEVBQVA7QUFDSCxLQUZEOztBQUlBWixTQUFLLHlFQUFMLEVBQWdGLFlBQU07QUFDbEZHLGVBQU8saUNBQXFCUyxJQUFyQixFQUEyQixDQUEzQixFQUE4QixDQUE5QixFQUFpQ1MsT0FBeEMsRUFBaURmLElBQWpELENBQXNELElBQXREO0FBQ0gsS0FGRDs7QUFJQU4sU0FBSyxtREFBTCxFQUEwRCxZQUFNO0FBQzVEWSxhQUFLTSxnQkFBTCxHQUF3QixrQkFBVWhCLEtBQVYsQ0FBZ0IsWUFBaEIsQ0FBeEI7QUFDQVUsYUFBS08sY0FBTCxHQUFzQixrQkFBVWpCLEtBQVYsQ0FBZ0IsWUFBaEIsQ0FBdEI7QUFDQUMsZUFBTyxpQ0FBcUJTLElBQXJCLEVBQTJCLENBQTNCLEVBQThCLENBQTlCLEVBQWlDVSxPQUF4QyxFQUFpRGhCLElBQWpELENBQXNELElBQXREO0FBQ0gsS0FKRDs7QUFNQU4sU0FBSyw0REFBTCxFQUFtRSxZQUFNO0FBQ3JFWSxhQUFLTSxnQkFBTCxHQUF3QixrQkFBVWhCLEtBQVYsQ0FBZ0IsWUFBaEIsQ0FBeEI7QUFDQVUsYUFBS08sY0FBTCxHQUFzQixrQkFBVWpCLEtBQVYsQ0FBZ0IsWUFBaEIsQ0FBdEI7QUFDQUMsZUFBTyxpQ0FBcUJTLElBQXJCLEVBQTJCLENBQTNCLEVBQThCLENBQTlCLEVBQWlDVSxPQUF4QyxFQUFpRGhCLElBQWpELENBQXNELEtBQXREO0FBQ0gsS0FKRDs7QUFNQVAsYUFBUyxlQUFULEVBQTBCLFlBQU07O0FBRTVCQyxhQUFLLHFEQUFMLEVBQTRELFlBQU07QUFDOURZLGlCQUFLRyxpQkFBTCxHQUF5QixrQkFBVWIsS0FBVixDQUFnQixZQUFoQixDQUF6QjtBQUNBVSxpQkFBS0ssZUFBTCxHQUF1QixrQkFBVWYsS0FBVixDQUFnQixZQUFoQixDQUF2QjtBQUNBQyxtQkFBTyxpQ0FBcUJTLElBQXJCLEVBQTJCLENBQTNCLEVBQThCLENBQTlCLEVBQWlDVyxRQUF4QyxFQUFrRGpCLElBQWxELENBQXVELElBQXZEO0FBRUgsU0FMRDtBQU1BTixhQUFLd0IsSUFBTCxDQUFVLDJEQUFWLEVBQXVFLFlBQU07QUFDekUsZ0JBQU1DLHFCQUFxQixpQ0FBcUJiLElBQXJCLEVBQTJCLENBQTNCLEVBQThCLENBQTlCLENBQTNCO0FBQ0FULG1CQUFPc0IsbUJBQW1CRixRQUExQixFQUFvQ2pCLElBQXBDLENBQXlDLElBQXpDO0FBQ0FILG1CQUFPc0IsbUJBQW1CQyxZQUExQixFQUF3Q3BCLElBQXhDLENBQTZDLElBQTdDO0FBQ0gsU0FKRDtBQUtILEtBYkQ7QUFjSCxDQTVDRCIsImZpbGUiOiJtb2RlbC50ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTG9jYWxEYXRlIH0gZnJvbSAnanMtam9kYSdcclxuXHJcbmltcG9ydCB7XHJcbiAgICBmaXJzdFdlZWtEYXksXHJcbiAgICBwYXJzZVdlZWtGcm9tRGF5MSxcclxuICAgIHBvcHVsYXRlTW9udGhEaXNwbGF5XHJcbn0gZnJvbSAnLi9tb2RlbCdcclxuXHJcblxyXG5kZXNjcmliZSgnI2ZpcnN0V2Vla0RheScsICgpID0+IHtcclxuICAgIHRlc3QoJ3Nob3VsZCByZXR1cm4gYSBtb25kYXkgaW4gc2FtZSB3ZWVrIGlmIGdpdmVuIGEgdGh1cnNkYXknLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZ2l2ZW5EYXkgPSBMb2NhbERhdGUucGFyc2UoJzIwMTgtMDUtMTEnKVxyXG4gICAgICAgIGV4cGVjdChmaXJzdFdlZWtEYXkoZ2l2ZW5EYXkpLmRheU9mV2VlaygpLnRvU3RyaW5nKCkpLnRvQmUoJ01PTkRBWScpXHJcbiAgICB9KVxyXG59KVxyXG5cclxuZGVzY3JpYmUoJyNwYXJzZVdlZWtGcm9tRGF5MScsICgpID0+IHtcclxuICAgIHRlc3QoJ3Nob3VsZCByZXR1cm4gYW4gYXJyYXkgcmVzdWx0IG9mIGEgc3VwcGxpZWQgZnVuY3Rpb24nLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc3RhcnREYXRlID0gTG9jYWxEYXRlLnBhcnNlKCcyMDE4LTA1LTA3JylcclxuICAgICAgICBjb25zdCBleHBlY3RlZFJlc3VsdCA9IFsnTU9OREFZJywnVFVFU0RBWScsJ1dFRE5FU0RBWScsJ1RIVVJTREFZJywnRlJJREFZJywnU0FUVVJEQVknLCdTVU5EQVknXVxyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHBhcnNlV2Vla0Zyb21EYXkxKHN0YXJ0RGF0ZSkoKGRhdGUpID0+IGRhdGUuZGF5T2ZXZWVrKCkudG9TdHJpbmcoKSlcclxuICAgICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKGV4cGVjdGVkUmVzdWx0KVxyXG4gICAgfSlcclxufSlcclxuXHJcbmRlc2NyaWJlKCcjcG9wdWxhdGVNb250aERpc3BsYXknLCAoKSA9PiB7XHJcbiAgICBsZXQgY29uZiA9IHt9XHJcbiAgICBiZWZvcmVFYWNoKCgpID0+IHtcclxuICAgICAgICBjb25mLmRpc3BsYXlEYXRlID0gTG9jYWxEYXRlLnBhcnNlKCcyMDE4LTA1LTAxJylcclxuICAgICAgICBjb25mLnNlbGVjdGVkU3RhcnREYXRlID0gdW5kZWZpbmVkXHJcbiAgICAgICAgY29uZi5zZWxlY3RlZEVuZERhdGUgPSB1bmRlZmluZWRcclxuICAgICAgICBjb25mLmFsbG93ZWRTdGFydERhdGUgPSB1bmRlZmluZWRcclxuICAgICAgICBjb25mLmFsbG93ZWRFbmREYXRlID0gdW5kZWZpbmVkXHJcbiAgICB9KVxyXG5cclxuICAgIGFmdGVyRWFjaCgoKSA9PiB7XHJcbiAgICAgICAgY29uZiA9IHt9XHJcbiAgICB9KVxyXG5cclxuICAgIHRlc3QoJ2xhc3QgZW50cnkgaW4gZmlyc3QgYXJyYXkgcmV0dXJuZWQgc2hvdWxkIGhhdmUgcHJvcGVydHkgXCJpbk1vbnRoOiB0cnVlXCInLCAoKSA9PiB7XHJcbiAgICAgICAgZXhwZWN0KHBvcHVsYXRlTW9udGhEaXNwbGF5KGNvbmYpWzBdWzZdLmluTW9udGgpLnRvQmUodHJ1ZSlcclxuICAgIH0pXHJcblxyXG4gICAgdGVzdCgnZW50cnkgaW4gYWxsb3dlZFJhbmdlIHNob3VsZCBoYXZlIFwiYWxsb3dlZDogdHJ1ZVwiJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbmYuYWxsb3dlZFN0YXJ0RGF0ZSA9IExvY2FsRGF0ZS5wYXJzZSgnMjAxNy0wNS0wMScpXHJcbiAgICAgICAgY29uZi5hbGxvd2VkRW5kRGF0ZSA9IExvY2FsRGF0ZS5wYXJzZSgnMjAxOC0wNS0xMScpXHJcbiAgICAgICAgZXhwZWN0KHBvcHVsYXRlTW9udGhEaXNwbGF5KGNvbmYpWzBdWzBdLmFsbG93ZWQpLnRvQmUodHJ1ZSlcclxuICAgIH0pXHJcblxyXG4gICAgdGVzdCgnZW50cnkgb3V0c2lkZSBvZiBhbGxvd2VkcmFuZ2Ugc2hvdWxkIGhhdmUgXCJhbGxvd2VkOiBmYWxzZVwiJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbmYuYWxsb3dlZFN0YXJ0RGF0ZSA9IExvY2FsRGF0ZS5wYXJzZSgnMjAxNy0wNS0wMScpXHJcbiAgICAgICAgY29uZi5hbGxvd2VkRW5kRGF0ZSA9IExvY2FsRGF0ZS5wYXJzZSgnMjAxNy0wNS0xMScpXHJcbiAgICAgICAgZXhwZWN0KHBvcHVsYXRlTW9udGhEaXNwbGF5KGNvbmYpWzBdWzBdLmFsbG93ZWQpLnRvQmUoZmFsc2UpXHJcbiAgICB9KVxyXG5cclxuICAgIGRlc2NyaWJlKCdzZWxlY3RlZFJhbmdlJywgKCkgPT4ge1xyXG5cclxuICAgICAgICB0ZXN0KCdlbnRyeSBpbiBzZWxlY3RlZHJhbmdlIHNob3VsZCBoYXZlIFwic2VsZWN0ZWQ6IHRydWVcIicsICgpID0+IHtcclxuICAgICAgICAgICAgY29uZi5zZWxlY3RlZFN0YXJ0RGF0ZSA9IExvY2FsRGF0ZS5wYXJzZSgnMjAxOC0wNS0wMScpXHJcbiAgICAgICAgICAgIGNvbmYuc2VsZWN0ZWRFbmREYXRlID0gTG9jYWxEYXRlLnBhcnNlKCcyMDE4LTA1LTExJylcclxuICAgICAgICAgICAgZXhwZWN0KHBvcHVsYXRlTW9udGhEaXNwbGF5KGNvbmYpWzFdWzBdLnNlbGVjdGVkKS50b0JlKHRydWUpXHJcblxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgdGVzdC5za2lwKCdlbnRyeSBvdXRzaWRlIHNlbGVjdGVkcmFuZ2Ugc2hvdWxkIGhhdmUgXCJzZWxlY3RlZDogZmFsc2VcIicsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZW5kT2ZTZWxlY3RlZFJhbmdlID0gcG9wdWxhdGVNb250aERpc3BsYXkoY29uZilbMV1bNF1cclxuICAgICAgICAgICAgZXhwZWN0KGVuZE9mU2VsZWN0ZWRSYW5nZS5zZWxlY3RlZCkudG9CZSh0cnVlKVxyXG4gICAgICAgICAgICBleHBlY3QoZW5kT2ZTZWxlY3RlZFJhbmdlLnNlbGVjdGVkRWRnZSkudG9CZSh0cnVlKVxyXG4gICAgICAgIH0pXHJcbiAgICB9KVxyXG59KVxyXG4iXX0=