e48db72657fbf8f77fe176c74cbeed66
'use strict';

var _jsJoda = require('js-joda');

var _model = require('./model');

describe('#firstWeekDay', function () {
    test('should return a monday in same week if given a thursday', function () {
        var givenDay = _jsJoda.LocalDate.parse('2018-05-11');
        expect((0, _model.firstWeekDay)(givenDay).dayOfWeek().toString()).toBe('MONDAY');
    });
});

describe('#parseWeekFromDay1', function () {
    test('should return an array result of a supplied function', function () {
        var startDate = _jsJoda.LocalDate.parse('2018-05-07');
        var expectedResult = ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'];
        var result = (0, _model.parseWeekFromDay1)(startDate)(function (date) {
            return date.dayOfWeek().toString();
        });
        expect(result).toEqual(expectedResult);
    });
});

describe('#populateMonthDisplay', function () {
    var conf = {};
    beforeEach(function () {
        conf.displayDate = _jsJoda.LocalDate.parse('2018-05-01');
        conf.selectedStartDate = undefined;
        conf.selectedEndDate = undefined;
        conf.allowedStartDate = undefined;
        conf.allowedEndDate = undefined;
    });

    test('last entry in first array returned should have property "inMonth: true"', function () {
        expect((0, _model.populateMonthDisplay)(conf)[0][6].inMonth).toBe(true);
    });

    test('entry in allowedRange should have "allowed: true"', function () {
        conf.allowedStartDate = _jsJoda.LocalDate.parse('2017-05-01');
        conf.allowedEndDate = _jsJoda.LocalDate.parse('2018-05-11');
        expect((0, _model.populateMonthDisplay)(conf)[0][0].allowed).toBe(true);
    });

    test('entry outside of allowedrange should have "allowed: false"', function () {
        conf.allowedStartDate = _jsJoda.LocalDate.parse('2017-05-01');
        conf.allowedEndDate = _jsJoda.LocalDate.parse('2017-05-11');
        expect((0, _model.populateMonthDisplay)(conf)[0][0].allowed).toBe(false);
    });

    describe('selectedRange', function () {
        conf.selectedStartDate = _jsJoda.LocalDate.parse('2018-05-01');
        conf.selectedEndDate = _jsJoda.LocalDate.parse('2018-05-11');

        test('entry in selectedrange should have "selected: true"', function () {
            console.log('log: ', JSON.stringify((0, _model.populateMonthDisplay)(conf)[1][0]));
            expect((0, _model.populateMonthDisplay)(conf)[1][0].selected).toBe(true);
        });
        test.skip('entry outside selectedrange should have "selected: false"', function () {
            var endOfSelectedRange = (0, _model.populateMonthDisplay)(conf)[1][4];
            expect(endOfSelectedRange.selected).toBe(true);
            expect(endOfSelectedRange.selectedEdge).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZGVsLnRlc3QuanMiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJ0ZXN0IiwiZ2l2ZW5EYXkiLCJwYXJzZSIsImV4cGVjdCIsImRheU9mV2VlayIsInRvU3RyaW5nIiwidG9CZSIsInN0YXJ0RGF0ZSIsImV4cGVjdGVkUmVzdWx0IiwicmVzdWx0IiwiZGF0ZSIsInRvRXF1YWwiLCJjb25mIiwiYmVmb3JlRWFjaCIsImRpc3BsYXlEYXRlIiwic2VsZWN0ZWRTdGFydERhdGUiLCJ1bmRlZmluZWQiLCJzZWxlY3RlZEVuZERhdGUiLCJhbGxvd2VkU3RhcnREYXRlIiwiYWxsb3dlZEVuZERhdGUiLCJpbk1vbnRoIiwiYWxsb3dlZCIsImNvbnNvbGUiLCJsb2ciLCJKU09OIiwic3RyaW5naWZ5Iiwic2VsZWN0ZWQiLCJza2lwIiwiZW5kT2ZTZWxlY3RlZFJhbmdlIiwic2VsZWN0ZWRFZGdlIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBOztBQU9BQSxTQUFTLGVBQVQsRUFBMEIsWUFBTTtBQUM1QkMsU0FBSyx5REFBTCxFQUFnRSxZQUFNO0FBQ2xFLFlBQU1DLFdBQVcsa0JBQVVDLEtBQVYsQ0FBZ0IsWUFBaEIsQ0FBakI7QUFDQUMsZUFBTyx5QkFBYUYsUUFBYixFQUF1QkcsU0FBdkIsR0FBbUNDLFFBQW5DLEVBQVAsRUFBc0RDLElBQXRELENBQTJELFFBQTNEO0FBQ0gsS0FIRDtBQUlILENBTEQ7O0FBT0FQLFNBQVMsb0JBQVQsRUFBK0IsWUFBTTtBQUNqQ0MsU0FBSyxzREFBTCxFQUE2RCxZQUFNO0FBQy9ELFlBQU1PLFlBQVksa0JBQVVMLEtBQVYsQ0FBZ0IsWUFBaEIsQ0FBbEI7QUFDQSxZQUFNTSxpQkFBaUIsQ0FBQyxRQUFELEVBQVUsU0FBVixFQUFvQixXQUFwQixFQUFnQyxVQUFoQyxFQUEyQyxRQUEzQyxFQUFvRCxVQUFwRCxFQUErRCxRQUEvRCxDQUF2QjtBQUNBLFlBQU1DLFNBQVMsOEJBQWtCRixTQUFsQixFQUE2QixVQUFDRyxJQUFEO0FBQUEsbUJBQVVBLEtBQUtOLFNBQUwsR0FBaUJDLFFBQWpCLEVBQVY7QUFBQSxTQUE3QixDQUFmO0FBQ0FGLGVBQU9NLE1BQVAsRUFBZUUsT0FBZixDQUF1QkgsY0FBdkI7QUFDSCxLQUxEO0FBTUgsQ0FQRDs7QUFTQVQsU0FBUyx1QkFBVCxFQUFrQyxZQUFNO0FBQ3BDLFFBQUlhLE9BQU8sRUFBWDtBQUNBQyxlQUFXLFlBQU07QUFDYkQsYUFBS0UsV0FBTCxHQUFtQixrQkFBVVosS0FBVixDQUFnQixZQUFoQixDQUFuQjtBQUNBVSxhQUFLRyxpQkFBTCxHQUF5QkMsU0FBekI7QUFDQUosYUFBS0ssZUFBTCxHQUF1QkQsU0FBdkI7QUFDQUosYUFBS00sZ0JBQUwsR0FBd0JGLFNBQXhCO0FBQ0FKLGFBQUtPLGNBQUwsR0FBc0JILFNBQXRCO0FBQ0gsS0FORDs7QUFRQWhCLFNBQUsseUVBQUwsRUFBZ0YsWUFBTTtBQUNsRkcsZUFBTyxpQ0FBcUJTLElBQXJCLEVBQTJCLENBQTNCLEVBQThCLENBQTlCLEVBQWlDUSxPQUF4QyxFQUFpRGQsSUFBakQsQ0FBc0QsSUFBdEQ7QUFDSCxLQUZEOztBQUlBTixTQUFLLG1EQUFMLEVBQTBELFlBQU07QUFDNURZLGFBQUtNLGdCQUFMLEdBQXdCLGtCQUFVaEIsS0FBVixDQUFnQixZQUFoQixDQUF4QjtBQUNBVSxhQUFLTyxjQUFMLEdBQXNCLGtCQUFVakIsS0FBVixDQUFnQixZQUFoQixDQUF0QjtBQUNBQyxlQUFPLGlDQUFxQlMsSUFBckIsRUFBMkIsQ0FBM0IsRUFBOEIsQ0FBOUIsRUFBaUNTLE9BQXhDLEVBQWlEZixJQUFqRCxDQUFzRCxJQUF0RDtBQUNILEtBSkQ7O0FBTUFOLFNBQUssNERBQUwsRUFBbUUsWUFBTTtBQUNyRVksYUFBS00sZ0JBQUwsR0FBd0Isa0JBQVVoQixLQUFWLENBQWdCLFlBQWhCLENBQXhCO0FBQ0FVLGFBQUtPLGNBQUwsR0FBc0Isa0JBQVVqQixLQUFWLENBQWdCLFlBQWhCLENBQXRCO0FBQ0FDLGVBQU8saUNBQXFCUyxJQUFyQixFQUEyQixDQUEzQixFQUE4QixDQUE5QixFQUFpQ1MsT0FBeEMsRUFBaURmLElBQWpELENBQXNELEtBQXREO0FBQ0gsS0FKRDs7QUFNQVAsYUFBUyxlQUFULEVBQTBCLFlBQU07QUFDNUJhLGFBQUtHLGlCQUFMLEdBQXlCLGtCQUFVYixLQUFWLENBQWdCLFlBQWhCLENBQXpCO0FBQ0FVLGFBQUtLLGVBQUwsR0FBdUIsa0JBQVVmLEtBQVYsQ0FBZ0IsWUFBaEIsQ0FBdkI7O0FBRUFGLGFBQUsscURBQUwsRUFBNEQsWUFBTTtBQUM5RHNCLG9CQUFRQyxHQUFSLENBQVksT0FBWixFQUFxQkMsS0FBS0MsU0FBTCxDQUFlLGlDQUFxQmIsSUFBckIsRUFBMkIsQ0FBM0IsRUFBOEIsQ0FBOUIsQ0FBZixDQUFyQjtBQUNBVCxtQkFBTyxpQ0FBcUJTLElBQXJCLEVBQTJCLENBQTNCLEVBQThCLENBQTlCLEVBQWlDYyxRQUF4QyxFQUFrRHBCLElBQWxELENBQXVELElBQXZEO0FBQ0gsU0FIRDtBQUlBTixhQUFLMkIsSUFBTCxDQUFVLDJEQUFWLEVBQXVFLFlBQU07QUFDekUsZ0JBQU1DLHFCQUFxQixpQ0FBcUJoQixJQUFyQixFQUEyQixDQUEzQixFQUE4QixDQUE5QixDQUEzQjtBQUNBVCxtQkFBT3lCLG1CQUFtQkYsUUFBMUIsRUFBb0NwQixJQUFwQyxDQUF5QyxJQUF6QztBQUNBSCxtQkFBT3lCLG1CQUFtQkMsWUFBMUIsRUFBd0N2QixJQUF4QyxDQUE2QyxJQUE3QztBQUNILFNBSkQ7QUFLSCxLQWJEO0FBY0gsQ0F4Q0QiLCJmaWxlIjoibW9kZWwudGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExvY2FsRGF0ZSB9IGZyb20gJ2pzLWpvZGEnXHJcblxyXG5pbXBvcnQge1xyXG4gICAgZmlyc3RXZWVrRGF5LFxyXG4gICAgcGFyc2VXZWVrRnJvbURheTEsXHJcbiAgICBwb3B1bGF0ZU1vbnRoRGlzcGxheVxyXG59IGZyb20gJy4vbW9kZWwnXHJcblxyXG5cclxuZGVzY3JpYmUoJyNmaXJzdFdlZWtEYXknLCAoKSA9PiB7XHJcbiAgICB0ZXN0KCdzaG91bGQgcmV0dXJuIGEgbW9uZGF5IGluIHNhbWUgd2VlayBpZiBnaXZlbiBhIHRodXJzZGF5JywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGdpdmVuRGF5ID0gTG9jYWxEYXRlLnBhcnNlKCcyMDE4LTA1LTExJylcclxuICAgICAgICBleHBlY3QoZmlyc3RXZWVrRGF5KGdpdmVuRGF5KS5kYXlPZldlZWsoKS50b1N0cmluZygpKS50b0JlKCdNT05EQVknKVxyXG4gICAgfSlcclxufSlcclxuXHJcbmRlc2NyaWJlKCcjcGFyc2VXZWVrRnJvbURheTEnLCAoKSA9PiB7XHJcbiAgICB0ZXN0KCdzaG91bGQgcmV0dXJuIGFuIGFycmF5IHJlc3VsdCBvZiBhIHN1cHBsaWVkIGZ1bmN0aW9uJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IExvY2FsRGF0ZS5wYXJzZSgnMjAxOC0wNS0wNycpXHJcbiAgICAgICAgY29uc3QgZXhwZWN0ZWRSZXN1bHQgPSBbJ01PTkRBWScsJ1RVRVNEQVknLCdXRURORVNEQVknLCdUSFVSU0RBWScsJ0ZSSURBWScsJ1NBVFVSREFZJywnU1VOREFZJ11cclxuICAgICAgICBjb25zdCByZXN1bHQgPSBwYXJzZVdlZWtGcm9tRGF5MShzdGFydERhdGUpKChkYXRlKSA9PiBkYXRlLmRheU9mV2VlaygpLnRvU3RyaW5nKCkpXHJcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChleHBlY3RlZFJlc3VsdClcclxuICAgIH0pXHJcbn0pXHJcblxyXG5kZXNjcmliZSgnI3BvcHVsYXRlTW9udGhEaXNwbGF5JywgKCkgPT4ge1xyXG4gICAgbGV0IGNvbmYgPSB7fVxyXG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICAgICAgY29uZi5kaXNwbGF5RGF0ZSA9IExvY2FsRGF0ZS5wYXJzZSgnMjAxOC0wNS0wMScpXHJcbiAgICAgICAgY29uZi5zZWxlY3RlZFN0YXJ0RGF0ZSA9IHVuZGVmaW5lZFxyXG4gICAgICAgIGNvbmYuc2VsZWN0ZWRFbmREYXRlID0gdW5kZWZpbmVkXHJcbiAgICAgICAgY29uZi5hbGxvd2VkU3RhcnREYXRlID0gdW5kZWZpbmVkXHJcbiAgICAgICAgY29uZi5hbGxvd2VkRW5kRGF0ZSA9IHVuZGVmaW5lZFxyXG4gICAgfSlcclxuXHJcbiAgICB0ZXN0KCdsYXN0IGVudHJ5IGluIGZpcnN0IGFycmF5IHJldHVybmVkIHNob3VsZCBoYXZlIHByb3BlcnR5IFwiaW5Nb250aDogdHJ1ZVwiJywgKCkgPT4ge1xyXG4gICAgICAgIGV4cGVjdChwb3B1bGF0ZU1vbnRoRGlzcGxheShjb25mKVswXVs2XS5pbk1vbnRoKS50b0JlKHRydWUpXHJcbiAgICB9KVxyXG5cclxuICAgIHRlc3QoJ2VudHJ5IGluIGFsbG93ZWRSYW5nZSBzaG91bGQgaGF2ZSBcImFsbG93ZWQ6IHRydWVcIicsICgpID0+IHtcclxuICAgICAgICBjb25mLmFsbG93ZWRTdGFydERhdGUgPSBMb2NhbERhdGUucGFyc2UoJzIwMTctMDUtMDEnKVxyXG4gICAgICAgIGNvbmYuYWxsb3dlZEVuZERhdGUgPSBMb2NhbERhdGUucGFyc2UoJzIwMTgtMDUtMTEnKVxyXG4gICAgICAgIGV4cGVjdChwb3B1bGF0ZU1vbnRoRGlzcGxheShjb25mKVswXVswXS5hbGxvd2VkKS50b0JlKHRydWUpXHJcbiAgICB9KVxyXG5cclxuICAgIHRlc3QoJ2VudHJ5IG91dHNpZGUgb2YgYWxsb3dlZHJhbmdlIHNob3VsZCBoYXZlIFwiYWxsb3dlZDogZmFsc2VcIicsICgpID0+IHtcclxuICAgICAgICBjb25mLmFsbG93ZWRTdGFydERhdGUgPSBMb2NhbERhdGUucGFyc2UoJzIwMTctMDUtMDEnKVxyXG4gICAgICAgIGNvbmYuYWxsb3dlZEVuZERhdGUgPSBMb2NhbERhdGUucGFyc2UoJzIwMTctMDUtMTEnKVxyXG4gICAgICAgIGV4cGVjdChwb3B1bGF0ZU1vbnRoRGlzcGxheShjb25mKVswXVswXS5hbGxvd2VkKS50b0JlKGZhbHNlKVxyXG4gICAgfSlcclxuXHJcbiAgICBkZXNjcmliZSgnc2VsZWN0ZWRSYW5nZScsICgpID0+IHtcclxuICAgICAgICBjb25mLnNlbGVjdGVkU3RhcnREYXRlID0gTG9jYWxEYXRlLnBhcnNlKCcyMDE4LTA1LTAxJylcclxuICAgICAgICBjb25mLnNlbGVjdGVkRW5kRGF0ZSA9IExvY2FsRGF0ZS5wYXJzZSgnMjAxOC0wNS0xMScpXHJcblxyXG4gICAgICAgIHRlc3QoJ2VudHJ5IGluIHNlbGVjdGVkcmFuZ2Ugc2hvdWxkIGhhdmUgXCJzZWxlY3RlZDogdHJ1ZVwiJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnbG9nOiAnLCBKU09OLnN0cmluZ2lmeShwb3B1bGF0ZU1vbnRoRGlzcGxheShjb25mKVsxXVswXSkpXHJcbiAgICAgICAgICAgIGV4cGVjdChwb3B1bGF0ZU1vbnRoRGlzcGxheShjb25mKVsxXVswXS5zZWxlY3RlZCkudG9CZSh0cnVlKVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgdGVzdC5za2lwKCdlbnRyeSBvdXRzaWRlIHNlbGVjdGVkcmFuZ2Ugc2hvdWxkIGhhdmUgXCJzZWxlY3RlZDogZmFsc2VcIicsICgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgZW5kT2ZTZWxlY3RlZFJhbmdlID0gcG9wdWxhdGVNb250aERpc3BsYXkoY29uZilbMV1bNF1cclxuICAgICAgICAgICAgZXhwZWN0KGVuZE9mU2VsZWN0ZWRSYW5nZS5zZWxlY3RlZCkudG9CZSh0cnVlKVxyXG4gICAgICAgICAgICBleHBlY3QoZW5kT2ZTZWxlY3RlZFJhbmdlLnNlbGVjdGVkRWRnZSkudG9CZSh0cnVlKVxyXG4gICAgICAgIH0pXHJcbiAgICB9KVxyXG59KVxyXG4iXX0=