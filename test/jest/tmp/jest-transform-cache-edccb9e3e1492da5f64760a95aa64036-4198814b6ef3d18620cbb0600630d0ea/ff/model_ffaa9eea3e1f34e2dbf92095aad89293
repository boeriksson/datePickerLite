45c514637b48bc6b8847b696fb3ecefb
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getModelByDate = exports.populateMonthDisplay = exports.isWithinRange = exports.firstWeekDay = exports.parseWeekFromDay1 = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _jsJoda = require('js-joda');

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var parseWeekFromDay1 = exports.parseWeekFromDay1 = function parseWeekFromDay1(startDate) {
    var dayNo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    return function (f) {
        if (dayNo < 7) {
            return [f(startDate.plusDays(dayNo))].concat(_toConsumableArray(parseWeekFromDay1(startDate, dayNo + 1)(f) || []));
        }
    };
};

var firstWeekDay = exports.firstWeekDay = function firstWeekDay(day) {
    return day.minusDays(day.dayOfWeek().value() - 1);
};

var parseWeekFromAnyDay = function parseWeekFromAnyDay(day) {
    return parseWeekFromDay1(firstWeekDay(day));
};

var getWeekHeaders = function getWeekHeaders(day) {
    return parseWeekFromAnyDay(day)(function (date) {
        return date.dayOfWeek().toString().toLowerCase().substr(0, 2);
    });
};

var isWithinRange = exports.isWithinRange = function isWithinRange(date, startDate, endDate) {
    console.log('date: %o, startDate: %o, endDate: %o', date, startDate, endDate);
    if (!startDate || !endDate) return false;
    return date.isAfter(startDate) && date.isBefore(endDate);
};

var populateMonthDisplay = exports.populateMonthDisplay = function populateMonthDisplay(conf) {
    var monthNo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : conf.displayDate.month().value();

    if (firstWeekDay(conf.displayDate).month().value() <= monthNo) {
        return [parseWeekFromAnyDay(conf.displayDate)(function (date) {
            console.log("withinRange: ", isWithinRange(date, conf.selectedStartDate, conf.selectedEndDate));
            return {
                dayNo: date.dayOfMonth(),
                inMonth: date.month().value() === monthNo
                //allowed: isWithinRange(date, conf.allowedStartDate, conf.allowedEndDate),
                //selected: isWithinRange(date, conf.selectedStartDate, conf.selectedEndDate)
            };
        })].concat(_toConsumableArray(populateMonthDisplay(_extends({}, conf, {
            displayDate: conf.displayDate.plusDays(7)
        }), monthNo)));
    } else {
        return [];
    }
};

var getDisplayDate = function getDisplayDate(_ref) {
    var _ref$displayDate = _ref.displayDate,
        displayDate = _ref$displayDate === undefined ? _jsJoda.LocalDate.now() : _ref$displayDate;
    return displayDate.minusDays(displayDate.dayOfMonth() - 1);
};

var getModelByDate = exports.getModelByDate = function getModelByDate() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    // config: { startDate, selectedStartDate, selectedEndDate, allowedStartDate, allowedEndDate }
    //check if dateStr is str, or localdate and then base model on that
    //else use today

    //get first day of month and set that as startdate in config
    //const startDate = startDate.minusDays(startDate.dayOfMonth() - 1)

    var conf = {
        displayDate: getDisplayDate(config), // Date in month to display - change to first day of month..
        selectedStartDate: config.selectedStartDate, // If selection, this is the startdate
        selectedEndDate: config.selectedEndDate, // If selection, enddate
        allowedStartDate: config.allowedStartDate, // If allowedrange, this is startdate
        allowedEndDate: config.allowedEndDate // allowedrange enddate


        //create array and add dayHeaders
    };var weekHeaders = getWeekHeaders(conf.displayDate);

    //create array and add weeks until last day of month has passed
    //  create array and add weekdays for each week.
    var monthDisplay = populateMonthDisplay(conf);
    console.log('monthDisplay: ', monthDisplay);

    return { weekHeaders: weekHeaders, monthDisplay: monthDisplay };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZGVsLmpzIl0sIm5hbWVzIjpbInBhcnNlV2Vla0Zyb21EYXkxIiwic3RhcnREYXRlIiwiZGF5Tm8iLCJmIiwicGx1c0RheXMiLCJmaXJzdFdlZWtEYXkiLCJkYXkiLCJtaW51c0RheXMiLCJkYXlPZldlZWsiLCJ2YWx1ZSIsInBhcnNlV2Vla0Zyb21BbnlEYXkiLCJnZXRXZWVrSGVhZGVycyIsImRhdGUiLCJ0b1N0cmluZyIsInRvTG93ZXJDYXNlIiwic3Vic3RyIiwiaXNXaXRoaW5SYW5nZSIsImVuZERhdGUiLCJjb25zb2xlIiwibG9nIiwiaXNBZnRlciIsImlzQmVmb3JlIiwicG9wdWxhdGVNb250aERpc3BsYXkiLCJjb25mIiwibW9udGhObyIsImRpc3BsYXlEYXRlIiwibW9udGgiLCJzZWxlY3RlZFN0YXJ0RGF0ZSIsInNlbGVjdGVkRW5kRGF0ZSIsImRheU9mTW9udGgiLCJpbk1vbnRoIiwiZ2V0RGlzcGxheURhdGUiLCJub3ciLCJnZXRNb2RlbEJ5RGF0ZSIsImNvbmZpZyIsImFsbG93ZWRTdGFydERhdGUiLCJhbGxvd2VkRW5kRGF0ZSIsIndlZWtIZWFkZXJzIiwibW9udGhEaXNwbGF5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7OztBQUVPLElBQU1BLGdEQUFvQixTQUFwQkEsaUJBQW9CLENBQUNDLFNBQUQ7QUFBQSxRQUFZQyxLQUFaLHVFQUFvQixDQUFwQjtBQUFBLFdBQTBCLGFBQUs7QUFDNUQsWUFBSUEsUUFBUSxDQUFaLEVBQWU7QUFDWCxvQkFBU0MsRUFBRUYsVUFBVUcsUUFBVixDQUFtQkYsS0FBbkIsQ0FBRixDQUFULDRCQUEyQ0Ysa0JBQWtCQyxTQUFsQixFQUE2QkMsUUFBUSxDQUFyQyxFQUF3Q0MsQ0FBeEMsS0FBOEMsRUFBekY7QUFDSDtBQUNKLEtBSmdDO0FBQUEsQ0FBMUI7O0FBTUEsSUFBTUUsc0NBQWUsU0FBZkEsWUFBZSxDQUFDQyxHQUFEO0FBQUEsV0FBU0EsSUFBSUMsU0FBSixDQUFjRCxJQUFJRSxTQUFK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V0FBTyxFQUFFRCx3QkFBRixFQUFlQywwQkFBZixFQUFQO0FBQ0gsQ0F6Qk0iLCJmaWxlIjoibW9kZWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMb2NhbERhdGUgfSBmcm9tICdqcy1qb2RhJ1xyXG5cclxuZXhwb3J0IGNvbnN0IHBhcnNlV2Vla0Zyb21EYXkxID0gKHN0YXJ0RGF0ZSwgZGF5Tm8gPSAwKSA9PiBmID0+IHtcclxuICAgIGlmIChkYXlObyA8IDcpIHtcclxuICAgICAgICByZXR1cm4gWyBmKHN0YXJ0RGF0ZS5wbHVzRGF5cyhkYXlObykpLCAuLi4ocGFyc2VXZWVrRnJvbURheTEoc3RhcnREYXRlLCBkYXlObyArIDEpKGYpIHx8IFtdKSBdXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBmaXJzdFdlZWtEYXkgPSAoZGF5KSA9PiBkYXkubWludXNEYXlzKGRheS5kYXlPZldlZWsoKS52YWx1ZSgpIC0gMSlcclxuXHJcbmNvbnN0IHBhcnNlV2Vla0Zyb21BbnlEYXkgPShkYXkgPT4gcGFyc2VXZWVrRnJvbURheTEoZmlyc3RXZWVrRGF5KGRheSkpKVxyXG5cclxuY29uc3QgZ2V0V2Vla0hlYWRlcnMgPSBkYXkgPT4gcGFyc2VXZWVrRnJvbUFueURheShkYXkpKChkYXRlKSA9PiBkYXRlLmRheU9mV2VlaygpLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKS5zdWJzdHIoMCwgMikpXHJcblxyXG5leHBvcnQgY29uc3QgaXNXaXRoaW5SYW5nZSA9IChkYXRlLCBzdGFydERhdGUsIGVuZERhdGUpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKCdkYXRlOiAlbywgc3RhcnREYXRlOiAlbywgZW5kRGF0ZTogJW8nLCBkYXRlLCBzdGFydERhdGUsIGVuZERhdGUpO1xyXG4gICAgaWYgKCFzdGFydERhdGUgfHwgIWVuZERhdGUpIHJldHVybiBmYWxzZVxyXG4gICAgcmV0dXJuIGRhdGUuaXNBZnRlcihzdGFydERhdGUpICYmIGRhdGUuaXNCZWZvcmUoZW5kRGF0ZSlcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IHBvcHVsYXRlTW9udGhEaXNwbGF5ID0gKGNvbmYsIG1vbnRoTm8gPSBjb25mLmRpc3BsYXlEYXRlLm1vbnRoKCkudmFsdWUoKSkgPT4ge1xyXG4gICAgaWYgKGZpcnN0V2Vla0RheShjb25mLmRpc3BsYXlEYXRlKS5tb250aCgpLnZhbHVlKCkgPD0gbW9udGhObykge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIHBhcnNlV2Vla0Zyb21BbnlEYXkoY29uZi5kaXNwbGF5RGF0ZSkoKGRhdGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwid2l0aGluUmFuZ2U6IFwiLCBpc1dpdGhpblJhbmdlKGRhdGUsIGNvbmYuc2VsZWN0ZWRTdGFydERhdGUsIGNvbmYuc2VsZWN0ZWRFbmREYXRlKSk7XHJcbiAgICAgICAgICAgIHJldHVybiAoe1xyXG4gICAgICAgICAgICAgICAgZGF5Tm86IGRhdGUuZGF5T2ZNb250aCgpLFxyXG4gICAgICAgICAgICAgICAgaW5Nb250aDogZGF0ZS5tb250aCgpLnZhbHVlKCkgPT09IG1vbnRoTm9cclxuICAgICAgICAgICAgICAgIC8vYWxsb3dlZDogaXNXaXRoaW5SYW5nZShkYXRlLCBjb25mLmFsbG93ZWRTdGFydERhdGUsIGNvbmYuYWxsb3dlZEVuZERhdGUpLFxyXG4gICAgICAgICAgICAgICAgLy9zZWxlY3RlZDogaXNXaXRoaW5SYW5nZShkYXRlLCBjb25mLnNlbGVjdGVkU3RhcnREYXRlLCBjb25mLnNlbGVjdGVkRW5kRGF0ZSlcclxuICAgICAgICAgICAgfSl9KSxcclxuICAgICAgICAgICAgLi4ucG9wdWxhdGVNb250aERpc3BsYXkoe1xyXG4gICAgICAgICAgICAgICAgLi4uY29uZixcclxuICAgICAgICAgICAgICAgIGRpc3BsYXlEYXRlOiBjb25mLmRpc3BsYXlEYXRlLnBsdXNEYXlzKDcpLFxyXG4gICAgICAgICAgICB9LCBtb250aE5vKVxyXG4gICAgICAgIF1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIFtdXHJcbiAgICB9XHJcbn1cclxuXHJcbmNvbnN0IGdldERpc3BsYXlEYXRlID0gKHsgZGlzcGxheURhdGUgPSBMb2NhbERhdGUubm93KCkgfSkgPT4gZGlzcGxheURhdGUubWludXNEYXlzKGRpc3BsYXlEYXRlLmRheU9mTW9udGgoKSAtIDEpXHJcblxyXG5leHBvcnQgY29uc3QgZ2V0TW9kZWxCeURhdGUgPSAoY29uZmlnID0ge30pID0+IHtcclxuICAgIC8vIGNvbmZpZzogeyBzdGFydERhdGUsIHNlbGVjdGVkU3RhcnREYXRlLCBzZWxlY3RlZEVuZERhdGUsIGFsbG93ZWRTdGFydERhdGUsIGFsbG93ZWRFbmREYXRlIH1cclxuICAgIC8vY2hlY2sgaWYgZGF0ZVN0ciBpcyBzdHIsIG9yIGxvY2FsZGF0ZSBhbmQgdGhlbiBiYXNlIG1vZGVsIG9uIHRoYXRcclxuICAgIC8vZWxzZSB1c2UgdG9kYXlcclxuXHJcbiAgICAvL2dldCBmaXJzdCBkYXkgb2YgbW9udGggYW5kIHNldCB0aGF0IGFzIHN0YXJ0ZGF0ZSBpbiBjb25maWdcclxuICAgIC8vY29uc3Qgc3RhcnREYXRlID0gc3RhcnREYXRlLm1pbnVzRGF5cyhzdGFydERhdGUuZGF5T2ZNb250aCgpIC0gMSlcclxuXHJcbiAgICBjb25zdCBjb25mID0ge1xyXG4gICAgICAgIGRpc3BsYXlEYXRlOiBnZXREaXNwbGF5RGF0ZShjb25maWcpLCAvLyBEYXRlIGluIG1vbnRoIHRvIGRpc3BsYXkgLSBjaGFuZ2UgdG8gZmlyc3QgZGF5IG9mIG1vbnRoLi5cclxuICAgICAgICBzZWxlY3RlZFN0YXJ0RGF0ZTogY29uZmlnLnNlbGVjdGVkU3RhcnREYXRlLCAvLyBJZiBzZWxlY3Rpb24sIHRoaXMgaXMgdGhlIHN0YXJ0ZGF0ZVxyXG4gICAgICAgIHNlbGVjdGVkRW5kRGF0ZTogY29uZmlnLnNlbGVjdGVkRW5kRGF0ZSwgLy8gSWYgc2VsZWN0aW9uLCBlbmRkYXRlXHJcbiAgICAgICAgYWxsb3dlZFN0YXJ0RGF0ZTogY29uZmlnLmFsbG93ZWRTdGFydERhdGUsIC8vIElmIGFsbG93ZWRyYW5nZSwgdGhpcyBpcyBzdGFydGRhdGVcclxuICAgICAgICBhbGxvd2VkRW5kRGF0ZTogY29uZmlnLmFsbG93ZWRFbmREYXRlIC8vIGFsbG93ZWRyYW5nZSBlbmRkYXRlXHJcbiAgICB9XHJcblxyXG4gICAgLy9jcmVhdGUgYXJyYXkgYW5kIGFkZCBkYXlIZWFkZXJzXHJcbiAgICBjb25zdCB3ZWVrSGVhZGVycyA9IGdldFdlZWtIZWFkZXJzKGNvbmYuZGlzcGxheURhdGUpO1xyXG5cclxuICAgIC8vY3JlYXRlIGFycmF5IGFuZCBhZGQgd2Vla3MgdW50aWwgbGFzdCBkYXkgb2YgbW9udGggaGFzIHBhc3NlZFxyXG4gICAgLy8gIGNyZWF0ZSBhcnJheSBhbmQgYWRkIHdlZWtkYXlzIGZvciBlYWNoIHdlZWsuXHJcbiAgICBjb25zdCBtb250aERpc3BsYXkgPSBwb3B1bGF0ZU1vbnRoRGlzcGxheShjb25mKVxyXG4gICAgY29uc29sZS5sb2coJ21vbnRoRGlzcGxheTogJywgbW9udGhEaXNwbGF5KTtcclxuXHJcbiAgICByZXR1cm4geyB3ZWVrSGVhZGVycywgbW9udGhEaXNwbGF5IH1cclxufVxyXG4iXX0=