dfb1a836824792ba991064ec395b315c
'use strict';

var _jsJoda = require('js-joda');

var _model = require('./model');

describe('#firstWeekDay', function () {
    test('should return a monday in same week if given a thursday', function () {
        var givenDay = _jsJoda.LocalDate.parse('2018-05-11');
        expect((0, _model.firstWeekDay)(givenDay).dayOfWeek().toString()).toBe('MONDAY');
    });
});

describe('#parseWeekFromDay1', function () {
    test('should return an array result of a supplied function', function () {
        var startDate = _jsJoda.LocalDate.parse('2018-05-07');
        var expectedResult = ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'];
        var result = (0, _model.parseWeekFromDay1)(startDate)(function (date) {
            return date.dayOfWeek().toString();
        });
        expect(result).toEqual(expectedResult);
    });
});

describe('#isSelectable', function () {
    var conf = {};
    beforeEach(function () {
        conf.displayDate = _jsJoda.LocalDate.parse('2018-05-01');
        conf.selectedStartDate = undefined;
        conf.selectedEndDate = undefined;
        conf.allowedStartDate = undefined;
        conf.allowedEndDate = undefined;
    });
    afterEach(function () {
        conf = {};
    });

    test('should be selectable if no allowedRange set', function () {
        expect((0, _model.isSelectable)(_jsJoda.LocalDate.parse('2018-05-11'), conf)).toBe(true);
    });
});

describe('#populateMonthDisplay', function () {
    var conf = {};
    beforeEach(function () {
        conf.displayDate = _jsJoda.LocalDate.parse('2018-05-01');
        conf.selectedStartDate = undefined;
        conf.selectedEndDate = undefined;
        conf.allowedStartDate = undefined;
        conf.allowedEndDate = undefined;
    });

    afterEach(function () {
        conf = {};
    });

    test('last entry in first array returned should have property "inMonth: true"', function () {
        expect((0, _model.populateMonthDisplay)(conf)[0][6].inMonth).toBe(true);
    });

    test('entry in allowedRange should have "allowed: true"', function () {
        conf.allowedStartDate = _jsJoda.LocalDate.parse('2017-05-01');
        conf.allowedEndDate = _jsJoda.LocalDate.parse('2018-05-11');
        expect((0, _model.populateMonthDisplay)(conf)[0][0].allowed).toBe(true);
    });

    test('entry outside of allowedrange should have "allowed: false"', function () {
        conf.allowedStartDate = _jsJoda.LocalDate.parse('2017-05-01');
        conf.allowedEndDate = _jsJoda.LocalDate.parse('2017-05-11');
        expect((0, _model.populateMonthDisplay)(conf)[0][0].allowed).toBe(false);
    });

    describe('selectedRange', function () {
        beforeEach(function () {
            conf.selectedStartDate = _jsJoda.LocalDate.parse('2018-05-01');
            conf.selectedEndDate = _jsJoda.LocalDate.parse('2018-05-11');
        });
        test('entry in selectedrange should have "selected: true"', function () {
            expect((0, _model.populateMonthDisplay)(conf)[1][0].selected).toBe(true);
        });
        test('entry outside selectedrange should have "selected: false"', function () {
            var endOfSelectedRange = (0, _model.populateMonthDisplay)(conf)[1][4];
            expect(endOfSelectedRange.selected).toBe(true);
            expect(endOfSelectedRange.selectedEdge).toBe(true);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,